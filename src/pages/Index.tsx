import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

type GameState = 'menu' | 'gameplay' | 'kcs' | 'journal';
type TimeOfDay = 'day' | 'night';

interface Visitor {
  id: number;
  name: string;
  suspiciousTraits: string[];
  isGuest: boolean;
  avatar: string;
}

const guestTraits = [
  { id: 1, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', icon: 'Move', description: '–†–µ–∑–∫–∏–µ, —É–≥–ª–æ–≤–∞—Ç—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∑—ã' },
  { id: 2, name: '–°—Ç—Ä–∞–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ', icon: 'Wind', description: '–ü—Ä–µ—Ä—ã–≤–∏—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –¥—ã—Ö–∞–Ω–∏–µ' },
  { id: 3, name: '–ë–ª–µ—Å–∫ –≥–ª–∞–∑', icon: 'Eye', description: '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥' },
  { id: 4, name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', icon: 'Thermometer', description: '–ù–µ–æ–±—ã—á–Ω–æ —Ö–æ–ª–æ–¥–Ω–∞—è –∏–ª–∏ —Ç—ë–ø–ª–∞—è –∫–æ–∂–∞' },
  { id: 5, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–æ—Ü–∏–π', icon: 'UserX', description: '–ë–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ' },
  { id: 6, name: '–ù–µ—á—ë—Ç–∫–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ', icon: 'Mirror', description: '–†–∞–∑–º—ã—Ç–æ–µ –∏–ª–∏ –∏—Å–∫–∞–∂—ë–Ω–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ' },
  { id: 7, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –∑–≤—É–∫–∏', icon: 'Volume2', description: '–®—ë–ø–æ—Ç, —Ö—Ä–∏–ø—ã, –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏' },
  { id: 8, name: '–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', icon: 'MessageSquare', description: '–û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–≤–ø–æ–ø–∞–¥ –æ—Ç–≤–µ—Ç—ã' },
  { id: 9, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–Ω–∏', icon: 'Sun', description: '–ò—Å–∫–∞–∂—ë–Ω–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è —Ç–µ–Ω—å' },
  { id: 10, name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Ö–∞', icon: 'Scan', description: '–ù–µ–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π –∑–∞–ø–∞—Ö' },
];

const Index = () => {
  const [gameState, setGameState] = useState<GameState>('menu');
  const [timeOfDay, setTimeOfDay] = useState<TimeOfDay>('day');
  const [day, setDay] = useState(1);
  const [survivedDays, setSurvivedDays] = useState(0);
  const [currentVisitor, setCurrentVisitor] = useState<Visitor | null>(null);
  const [journalEntries, setJournalEntries] = useState<string[]>([
    '–î–µ–Ω—å 1: –°–æ—Å–µ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ–± –∞–Ω–æ–º–∞–ª—å–Ω–æ–º —Ö–æ–ª–æ–¥–µ. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è...',
  ]);

  const generateVisitor = (): Visitor => {
    const isGuest = Math.random() > 0.5;
    const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–ò–≤–∞–Ω', '–ï–ª–µ–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞'];
    const suspiciousCount = isGuest ? Math.floor(Math.random() * 3) + 1 : 0;
    const selectedTraits = [...guestTraits]
      .sort(() => Math.random() - 0.5)
      .slice(0, suspiciousCount)
      .map(t => t.name);

    return {
      id: Date.now(),
      name: names[Math.floor(Math.random() * names.length)],
      suspiciousTraits: selectedTraits,
      isGuest,
      avatar: 'üë§',
    };
  };

  const startGame = () => {
    setGameState('gameplay');
    setDay(1);
    setSurvivedDays(0);
    setTimeOfDay('day');
    setCurrentVisitor(generateVisitor());
    setJournalEntries(['–î–µ–Ω—å 1: –°–æ—Å–µ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –æ–± –∞–Ω–æ–º–∞–ª—å–Ω–æ–º —Ö–æ–ª–æ–¥–µ. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è...']);
  };

  const handleDecision = (decision: 'allow' | 'deny') => {
    if (!currentVisitor) return;

    const correct = (decision === 'deny' && currentVisitor.isGuest) || 
                    (decision === 'allow' && !currentVisitor.isGuest);

    if (!correct && currentVisitor.isGuest) {
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –í—ã –≤–ø—É—Å—Ç–∏–ª–∏ –≥–æ—Å—Ç—è. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.`]);
      setGameState('menu');
      return;
    }

    const entry = decision === 'allow' 
      ? `–î–µ–Ω—å ${day}: –í–ø—É—Å—Ç–∏–ª–∏ ${currentVisitor.name}. ${correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.' : '–û—Ç–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–∏–Ω–Ω–æ–º—É.'}`
      : `–î–µ–Ω—å ${day}: –û—Ç–∫–∞–∑–∞–ª–∏ ${currentVisitor.name}. ${correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.' : '–£–ø—É—â–µ–Ω–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫.'}`;
    
    setJournalEntries(prev => [...prev, entry]);

    if (timeOfDay === 'day') {
      setTimeOfDay('night');
    } else {
      setDay(prev => prev + 1);
      setSurvivedDays(prev => prev + 1);
      setTimeOfDay('day');
      setCurrentVisitor(generateVisitor());
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      {gameState === 'menu' && (
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-b from-background to-card">
          <div className="text-center space-y-8 animate-fade-in">
            <div className="space-y-4">
              <h1 className="text-6xl font-bold text-primary animate-flicker">–ì–û–°–¢–ò</h1>
              <p className="text-xl text-muted-foreground">–•–æ—Ä—Ä–æ—Ä –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ</p>
            </div>
            
            <div className="space-y-4 max-w-md mx-auto px-4">
              <Button 
                onClick={startGame}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground border-2 border-primary"
                size="lg"
              >
                –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
              </Button>
              
              <Button 
                onClick={() => setGameState('kcs')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°
              </Button>

              <Button 
                onClick={() => setGameState('journal')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
              </Button>
            </div>

            {survivedDays > 0 && (
              <div className="text-muted-foreground">
                <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {survivedDays} {survivedDays === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {gameState === 'gameplay' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ú–µ–Ω—é
              </Button>
              
              <div className="flex gap-4 items-center">
                <Badge variant="outline" className="text-lg px-4 py-2">
                  <Icon name="Calendar" className="mr-2" size={16} />
                  –î–µ–Ω—å {day}
                </Badge>
                <Badge 
                  variant={timeOfDay === 'day' ? 'default' : 'secondary'}
                  className="text-lg px-4 py-2"
                >
                  <Icon name={timeOfDay === 'day' ? 'Sun' : 'Moon'} className="mr-2" size={16} />
                  {timeOfDay === 'day' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
                </Badge>
              </div>

              <Button 
                variant="outline" 
                onClick={() => setGameState('kcs')}
                className="border-2"
              >
                <Icon name="BookOpen" className="mr-2" size={16} />
                –ö–ß–°
              </Button>
            </div>

            {currentVisitor && (
              <Card className="p-8 bg-card border-2 animate-fade-in">
                <div className="space-y-6">
                  <div className="text-center space-y-4">
                    <div className="text-6xl">{currentVisitor.avatar}</div>
                    <h2 className="text-3xl font-bold">{currentVisitor.name}</h2>
                    <p className="text-muted-foreground">
                      {timeOfDay === 'day' 
                        ? '–°—Ç—É—á–∏—Ç—Å—è –≤ –¥–≤–µ—Ä—å. –ü—É—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä—å?' 
                        : '–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º...'}
                    </p>
                  </div>

                  {currentVisitor.suspiciousTraits.length > 0 && (
                    <div className="space-y-2">
                      <p className="text-sm text-muted-foreground font-semibold">
                        <Icon name="AlertTriangle" className="inline mr-2 animate-pulse-danger" size={16} />
                        –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {currentVisitor.suspiciousTraits.map((trait, idx) => (
                          <Badge key={idx} variant="destructive" className="text-sm">
                            {trait}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}

                  {timeOfDay === 'day' && (
                    <div className="flex gap-4 pt-4">
                      <Button 
                        onClick={() => handleDecision('allow')}
                        className="flex-1 bg-primary hover:bg-primary/90 border-2 border-primary"
                        size="lg"
                      >
                        <Icon name="DoorOpen" className="mr-2" size={20} />
                        –í–ø—É—Å—Ç–∏—Ç—å
                      </Button>
                      <Button 
                        onClick={() => handleDecision('deny')}
                        variant="outline"
                        className="flex-1 border-2"
                        size="lg"
                      >
                        <Icon name="DoorClosed" className="mr-2" size={20} />
                        –û—Ç–∫–∞–∑–∞—Ç—å
                      </Button>
                    </div>
                  )}

                  {timeOfDay === 'night' && (
                    <Button 
                      onClick={() => {
                        setTimeOfDay('day');
                        setDay(prev => prev + 1);
                        setSurvivedDays(prev => prev + 1);
                        setCurrentVisitor(generateVisitor());
                      }}
                      className="w-full bg-primary hover:bg-primary/90 border-2 border-primary"
                      size="lg"
                    >
                      <Icon name="Moon" className="mr-2" size={20} />
                      –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                    </Button>
                  )}
                </div>
              </Card>
            )}
          </div>
        </div>
      )}

      {gameState === 'kcs' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState(survivedDays > 0 ? 'gameplay' : 'menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="space-y-2">
                  <h2 className="text-xl font-bold flex items-center">
                    <Icon name="Shield" className="mr-2 text-primary" size={24} />
                    –ö–æ–º–∏—Ç–µ—Ç –ø–æ –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–º –°–∏—Ç—É–∞—Ü–∏—è–º
                  </h2>
                  <p className="text-muted-foreground">
                    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ –±–æ—Ä—å–±–µ —Å –≥–æ—Å—Ç—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–ª—é–¥–µ–π.
                  </p>
                </div>

                <div className="grid gap-4 md:grid-cols-2">
                  {guestTraits.map((trait) => (
                    <Card key={trait.id} className="p-4 bg-secondary/50 hover:bg-secondary transition-colors">
                      <div className="flex items-start gap-3">
                        <Icon name={trait.icon as any} className="text-primary mt-1" size={20} />
                        <div className="space-y-1">
                          <h3 className="font-semibold">{trait.name}</h3>
                          <p className="text-sm text-muted-foreground">{trait.description}</p>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'journal' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <ScrollArea className="h-[600px] pr-4">
                <div className="space-y-4">
                  {journalEntries.map((entry, idx) => (
                    <div key={idx} className="border-l-2 border-primary pl-4 py-2">
                      <p className="text-sm text-muted-foreground">–ó–∞–ø–∏—Å—å #{idx + 1}</p>
                      <p>{entry}</p>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
};

export default Index;
