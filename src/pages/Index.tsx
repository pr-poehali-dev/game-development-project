import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { Alert, AlertDescription } from '@/components/ui/alert';

type GameState = 'menu' | 'arrival' | 'house' | 'kcs' | 'journal';

interface Person {
  id: number;
  name: string;
  isInfected: boolean;
  avatar: string;
  suspiciousTraits: string[];
  wasChecked: boolean;
}

const guestTraits = [
  { id: 1, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', icon: 'Move', description: '–†–µ–∑–∫–∏–µ, —É–≥–ª–æ–≤–∞—Ç—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–∑–∏—Ç–æ–º' },
  { id: 2, name: '–°—Ç—Ä–∞–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ', icon: 'Wind', description: '–ü–∞—Ä–∞–∑–∏—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' },
  { id: 3, name: '–ë–ª–µ—Å–∫ –≥–ª–∞–∑', icon: 'Eye', description: '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥ ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞—Ä–∞–∑–∏—Ç–∞' },
  { id: 4, name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', icon: 'Thermometer', description: '–•–æ–ª–æ–¥–Ω–∞—è –∫–æ–∂–∞ –∏–∑-–∑–∞ –æ–±–º–æ—Ä–æ–∂–µ–Ω–∏—è' },
  { id: 5, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–æ—Ü–∏–π', icon: 'UserX', description: '–ü–∞—Ä–∞–∑–∏—Ç –ø–æ–¥–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏' },
  { id: 6, name: '–ù–µ—á—ë—Ç–∫–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ', icon: 'Mirror', description: '–ê–Ω–æ–º–∞–ª–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–∞—Ä–∞–∑–∏—Ç–æ–º' },
  { id: 7, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –∑–≤—É–∫–∏', icon: 'Volume2', description: '–®—ë–ø–æ—Ç –∏ —Ö—Ä–∏–ø—ã –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–∑–≥–∞' },
  { id: 8, name: '–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', icon: 'MessageSquare', description: '–ü–æ—Ç–µ—Ä—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π' },
  { id: 9, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–Ω–∏', icon: 'Sun', description: '–ù–µ–∏–∑—É—á–µ–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –ø–∞—Ä–∞–∑–∏—Ç–∞' },
  { id: 10, name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Ö–∞', icon: 'Scan', description: '–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—Ä–∞–∑–∏—Ç–∞' },
];

const Index = () => {
  const [gameState, setGameState] = useState<GameState>('menu');
  const [day, setDay] = useState(1);
  const [survivedDays, setSurvivedDays] = useState(0);
  const [peopleInHouse, setPeopleInHouse] = useState<Person[]>([]);
  const [currentArrival, setCurrentArrival] = useState<Person | null>(null);
  const [journalEntries, setJournalEntries] = useState<string[]>([
    '–î–µ–Ω—å 1: –ù–∞—á–∞–ª—Å—è –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥. –í—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É –æ–ø–∞—Å–Ω–æ. –û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è ‚Äî –≥–æ—Å—Ç–∏ –Ω–∞–π–¥—É—Ç –∏ —É–±—å—é—Ç.',
  ]);
  const [aloneWarning, setAloneWarning] = useState(false);

  const generatePerson = (): Person => {
    const isInfected = Math.random() > 0.6;
    const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–ò–≤–∞–Ω', '–ï–ª–µ–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π', '–û–ª—å–≥–∞'];
    const suspiciousCount = isInfected ? Math.floor(Math.random() * 3) + 2 : Math.floor(Math.random() * 2);
    const selectedTraits = [...guestTraits]
      .sort(() => Math.random() - 0.5)
      .slice(0, suspiciousCount)
      .map(t => t.name);

    return {
      id: Date.now(),
      name: names[Math.floor(Math.random() * names.length)],
      isInfected,
      avatar: 'üë§',
      suspiciousTraits: selectedTraits,
      wasChecked: false,
    };
  };

  const startGame = () => {
    setPeopleInHouse([]);
    setDay(1);
    setSurvivedDays(0);
    setJournalEntries(['–î–µ–Ω—å 1: –ù–∞—á–∞–ª—Å—è –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥. –í—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É –æ–ø–∞—Å–Ω–æ. –û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è ‚Äî –≥–æ—Å—Ç–∏ –Ω–∞–π–¥—É—Ç –∏ —É–±—å—é—Ç.']);
    setCurrentArrival(generatePerson());
    setGameState('arrival');
    setAloneWarning(false);
  };

  const letPersonIn = () => {
    if (!currentArrival) return;
    
    setPeopleInHouse(prev => [...prev, currentArrival]);
    setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –í–ø—É—Å—Ç–∏–ª–∏ ${currentArrival.name} –≤ –¥–æ–º.`]);
    setCurrentArrival(null);
    setGameState('house');
    setAloneWarning(false);
  };

  const denyPerson = () => {
    if (!currentArrival) return;
    
    setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –û—Ç–∫–∞–∑–∞–ª–∏ ${currentArrival.name}. –û–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–æ—Ä–æ–∑–µ...`]);
    setCurrentArrival(null);
    setGameState('house');
  };

  const checkPerson = (personId: number) => {
    const person = peopleInHouse.find(p => p.id === personId);
    if (!person || person.wasChecked) return;

    setPeopleInHouse(prev => 
      prev.map(p => p.id === personId ? { ...p, wasChecked: true } : p)
    );

    if (person.isInfected) {
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: ${person.name} –±—ã–ª –∑–∞—Ä–∞–∂—ë–Ω! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏—Å—Ç—É–ø –±–µ–∑—É–º–∏—è...`]);
      setTimeout(() => {
        setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã–π —É–±–∏–ª –≤—Å–µ—Ö.`]);
        setGameState('menu');
      }, 2000);
    } else {
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ü—Ä–æ–≤–µ—Ä–∫–∞ ${person.name} ‚Äî —á–∏—Å—Ç—ã–π —á–µ–ª–æ–≤–µ–∫.`]);
    }
  };

  const removePerson = (personId: number) => {
    const person = peopleInHouse.find(p => p.id === personId);
    if (!person || !person.wasChecked) return;

    if (person.isInfected) {
      setPeopleInHouse(prev => prev.filter(p => p.id !== personId));
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–ª–∏ ${person.name}. –î–æ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`]);
    } else {
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –í—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ–≤–∏–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –û–Ω –ø–æ–≥–∏–± –æ—Ç —Ö–æ–ª–æ–¥–∞...`]);
      setPeopleInHouse(prev => prev.filter(p => p.id !== personId));
    }
  };

  const endDay = () => {
    const uncheckedInfected = peopleInHouse.find(p => p.isInfected && !p.wasChecked);
    
    if (uncheckedInfected) {
      setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: ${uncheckedInfected.name} –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç—Ä–æ–ª—å. –ü–∞—Ä–∞–∑–∏—Ç –≤–∑—è–ª –≤–µ—Ä—Ö. –í—Å–µ –º–µ—Ä—Ç–≤—ã.`]);
      setTimeout(() => {
        setGameState('menu');
      }, 2000);
      return;
    }

    if (peopleInHouse.length === 0) {
      setAloneWarning(true);
      setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –æ–¥–∏–Ω. –ì–æ—Å—Ç–∏ –ø—Ä–∏–¥—É—Ç –∏ —É–±—å—é—Ç –≤–∞—Å...`]);
      setTimeout(() => {
        setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ì–æ—Å—Ç–∏ –Ω–∞—à–ª–∏ –≤–∞—Å –æ–¥–Ω–æ–≥–æ.`]);
        setGameState('menu');
      }, 2000);
      return;
    }

    setDay(prev => prev + 1);
    setSurvivedDays(prev => prev + 1);
    setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: –î–µ–Ω—å –ø—Ä–æ—à—ë–ª. –í—Å–µ –∂–∏–≤—ã. –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏.`]);
    setCurrentArrival(generatePerson());
    setGameState('arrival');
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      {gameState === 'menu' && (
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-b from-background to-card">
          <div className="text-center space-y-8 animate-fade-in">
            <div className="space-y-4">
              <h1 className="text-6xl font-bold text-primary animate-flicker">–ì–û–°–¢–ò</h1>
              <p className="text-xl text-muted-foreground">–•–æ—Ä—Ä–æ—Ä –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ</p>
              <p className="text-sm text-muted-foreground max-w-md mx-auto px-4">
                –ü–∞—Ä–∞–∑–∏—Ç—ã-–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –ø—Ä–æ–Ω–∏–∫–∞—é—Ç —á–µ—Ä–µ–∑ —É—à–∏ –∑–∞–º—ë—Ä–∑—à–∏—Ö –ª—é–¥–µ–π. 
                –í–ø—É—Å–∫–∞–π—Ç–µ –≤—ã–∂–∏–≤—à–∏—Ö, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ö, –Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –æ–¥–Ω–∏...
              </p>
            </div>
            
            <div className="space-y-4 max-w-md mx-auto px-4">
              <Button 
                onClick={startGame}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground border-2 border-primary"
                size="lg"
              >
                –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
              </Button>
              
              <Button 
                onClick={() => setGameState('kcs')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°
              </Button>

              <Button 
                onClick={() => setGameState('journal')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
              </Button>
            </div>

            {survivedDays > 0 && (
              <div className="text-muted-foreground">
                <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {survivedDays} {survivedDays === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {gameState === 'arrival' && currentArrival && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ú–µ–Ω—é
              </Button>
              
              <Badge variant="outline" className="text-lg px-4 py-2">
                <Icon name="Calendar" className="mr-2" size={16} />
                –î–µ–Ω—å {day}
              </Badge>

              <Button 
                variant="outline" 
                onClick={() => setGameState('kcs')}
                className="border-2"
              >
                <Icon name="BookOpen" className="mr-2" size={16} />
                –ö–ß–°
              </Button>
            </div>

            <Alert className="border-primary/50">
              <Icon name="Users" className="h-4 w-4" />
              <AlertDescription>
                –í –¥–æ–º–µ: {peopleInHouse.length} {peopleInHouse.length === 1 ? '—á–µ–ª–æ–≤–µ–∫' : '—á–µ–ª–æ–≤–µ–∫–∞'}
                {peopleInHouse.length === 0 && ' ‚Äî –û–ü–ê–°–ù–û! –û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è!'}
              </AlertDescription>
            </Alert>

            <Card className="p-8 bg-card border-2 animate-fade-in">
              <div className="space-y-6">
                <div className="text-center space-y-4">
                  <Icon name="DoorOpen" className="mx-auto text-primary animate-pulse-danger" size={64} />
                  <h2 className="text-3xl font-bold">–°—Ç—É–∫ –≤ –¥–≤–µ—Ä—å</h2>
                  <div className="text-6xl">{currentArrival.avatar}</div>
                  <h3 className="text-2xl">{currentArrival.name}</h3>
                  <p className="text-muted-foreground">
                    "–ü—É—Å—Ç–∏—Ç–µ! –ù–∞ —É–ª–∏—Ü–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥! –ü—Ä–æ—à—É –≤–∞—Å!"
                  </p>
                </div>

                <div className="bg-secondary/30 p-4 rounded-lg">
                  <p className="text-sm text-muted-foreground mb-2">
                    <Icon name="Info" className="inline mr-2" size={16} />
                    –ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ –≤–ø—É—Å—Ç–∏—Ç–µ
                  </p>
                </div>

                <div className="flex gap-4">
                  <Button 
                    onClick={letPersonIn}
                    className="flex-1 bg-primary hover:bg-primary/90 border-2 border-primary"
                    size="lg"
                  >
                    <Icon name="DoorOpen" className="mr-2" size={20} />
                    –í–ø—É—Å—Ç–∏—Ç—å
                  </Button>
                  <Button 
                    onClick={denyPerson}
                    variant="outline"
                    className="flex-1 border-2"
                    size="lg"
                  >
                    <Icon name="DoorClosed" className="mr-2" size={20} />
                    –û—Ç–∫–∞–∑–∞—Ç—å
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'house' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ú–µ–Ω—é
              </Button>
              
              <Badge variant="outline" className="text-lg px-4 py-2">
                <Icon name="Calendar" className="mr-2" size={16} />
                –î–µ–Ω—å {day}
              </Badge>

              <Button 
                variant="outline" 
                onClick={() => setGameState('kcs')}
                className="border-2"
              >
                <Icon name="BookOpen" className="mr-2" size={16} />
                –ö–ß–°
              </Button>
            </div>

            {aloneWarning && (
              <Alert variant="destructive" className="animate-pulse-danger">
                <Icon name="AlertTriangle" className="h-4 w-4" />
                <AlertDescription>
                  –û–ü–ê–°–ù–û! –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –æ–¥–∏–Ω. –ì–æ—Å—Ç–∏ –ø—Ä–∏–¥—É—Ç –Ω–æ—á—å—é...
                </AlertDescription>
              </Alert>
            )}

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-bold">
                    <Icon name="Home" className="inline mr-2" size={24} />
                    –í –¥–æ–º–µ
                  </h2>
                  <Badge variant="outline">
                    –õ—é–¥–µ–π: {peopleInHouse.length}
                  </Badge>
                </div>

                {peopleInHouse.length === 0 ? (
                  <div className="text-center py-12 text-muted-foreground">
                    <Icon name="Users" className="mx-auto mb-4 opacity-50" size={48} />
                    <p>–í –¥–æ–º–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç</p>
                    <p className="text-sm mt-2 text-destructive">–û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ–ø–∞—Å–Ω–æ!</p>
                  </div>
                ) : (
                  <div className="grid gap-4 md:grid-cols-2">
                    {peopleInHouse.map((person) => (
                      <Card key={person.id} className="p-4 bg-secondary/50">
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="text-3xl">{person.avatar}</div>
                              <div>
                                <h3 className="font-semibold">{person.name}</h3>
                                {person.wasChecked && (
                                  <Badge 
                                    variant={person.isInfected ? 'destructive' : 'default'}
                                    className="text-xs"
                                  >
                                    {person.isInfected ? '–ó–ê–†–ê–ñ–Å–ù!' : '–ß–∏—Å—Ç'}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>

                          {person.wasChecked && person.suspiciousTraits.length > 0 && (
                            <div className="space-y-1">
                              <p className="text-xs text-muted-foreground">–ü—Ä–∏–∑–Ω–∞–∫–∏:</p>
                              <div className="flex flex-wrap gap-1">
                                {person.suspiciousTraits.map((trait, idx) => (
                                  <Badge key={idx} variant="outline" className="text-xs">
                                    {trait}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}

                          <div className="flex gap-2">
                            {!person.wasChecked && (
                              <Button 
                                onClick={() => checkPerson(person.id)}
                                size="sm"
                                variant="outline"
                                className="flex-1"
                              >
                                <Icon name="Search" className="mr-1" size={14} />
                                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                              </Button>
                            )}
                            {person.wasChecked && (
                              <Button 
                                onClick={() => removePerson(person.id)}
                                size="sm"
                                variant={person.isInfected ? 'destructive' : 'outline'}
                                className="flex-1"
                              >
                                <Icon name="UserX" className="mr-1" size={14} />
                                –ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                            )}
                          </div>
                        </div>
                      </Card>
                    ))}
                  </div>
                )}

                <Button 
                  onClick={endDay}
                  className="w-full bg-primary hover:bg-primary/90 border-2 border-primary"
                  size="lg"
                >
                  <Icon name="Moon" className="mr-2" size={20} />
                  –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–Ω—å
                </Button>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'kcs' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState(currentArrival ? 'arrival' : peopleInHouse.length > 0 ? 'house' : 'menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="space-y-2">
                  <h2 className="text-xl font-bold flex items-center">
                    <Icon name="Shield" className="mr-2 text-primary" size={24} />
                    –ö–æ–º–∏—Ç–µ—Ç –ø–æ –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–º –°–∏—Ç—É–∞—Ü–∏—è–º
                  </h2>
                  <Alert>
                    <Icon name="Bug" className="h-4 w-4" />
                    <AlertDescription>
                      <strong>–ü–∞—Ä–∞–∑–∏—Ç-–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω:</strong> –ü—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤ –º–æ–∑–≥ —á–µ—Ä–µ–∑ —É—Ö–æ –∑–∞–º—ë—Ä–∑—à–∏—Ö –ª—é–¥–µ–π. 
                      –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å, –≤–ø–∞–¥–∞—é—Ç –≤ –±–µ–∑—É–º–∏–µ –∏ —É–±–∏–≤–∞—é—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.
                    </AlertDescription>
                  </Alert>
                </div>

                <div className="grid gap-4 md:grid-cols-2">
                  {guestTraits.map((trait) => (
                    <Card key={trait.id} className="p-4 bg-secondary/50 hover:bg-secondary transition-colors">
                      <div className="flex items-start gap-3">
                        <Icon name={trait.icon as any} className="text-primary mt-1" size={20} />
                        <div className="space-y-1">
                          <h3 className="font-semibold">{trait.name}</h3>
                          <p className="text-sm text-muted-foreground">{trait.description}</p>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'journal' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <ScrollArea className="h-[600px] pr-4">
                <div className="space-y-4">
                  {journalEntries.map((entry, idx) => (
                    <div key={idx} className="border-l-2 border-primary pl-4 py-2">
                      <p className="text-sm text-muted-foreground">–ó–∞–ø–∏—Å—å #{idx + 1}</p>
                      <p>{entry}</p>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
};

export default Index;
