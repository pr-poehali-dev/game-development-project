import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Textarea } from '@/components/ui/textarea';

type GameState = 'menu' | 'arrival' | 'door-dialogue' | 'house' | 'inspection' | 'dialogue' | 'kcs' | 'journal';

interface Person {
  id: number;
  name: string;
  isInfected: boolean;
  avatar: string;
  suspiciousTraits: string[];
  wasChecked: boolean;
  dialogue: string[];
  currentDialogueIndex: number;
}

const guestTraits = [
  { id: 1, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è', icon: 'Move', description: '–†–µ–∑–∫–∏–µ, —É–≥–ª–æ–≤–∞—Ç—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–∑–∏—Ç–æ–º', check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è' },
  { id: 2, name: '–°—Ç—Ä–∞–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ', icon: 'Wind', description: '–ü–∞—Ä–∞–∑–∏—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', check: '–ü–æ—Å–ª—É—à–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ' },
  { id: 3, name: '–ë–ª–µ—Å–∫ –≥–ª–∞–∑', icon: 'Eye', description: '–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥ ‚Äî –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞—Ä–∞–∑–∏—Ç–∞', check: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–ª–∞–∑–∞' },
  { id: 4, name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', icon: 'Thermometer', description: '–•–æ–ª–æ–¥–Ω–∞—è –∫–æ–∂–∞ –∏–∑-–∑–∞ –æ–±–º–æ—Ä–æ–∂–µ–Ω–∏—è', check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä—É–∫–∏' },
  { id: 5, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–æ—Ü–∏–π', icon: 'UserX', description: '–ü–∞—Ä–∞–∑–∏—Ç –ø–æ–¥–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', check: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' },
  { id: 6, name: '–ù–µ—á—ë—Ç–∫–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ', icon: 'Mirror', description: '–ê–Ω–æ–º–∞–ª–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–∞—Ä–∞–∑–∏—Ç–æ–º', check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–µ—Ä–∫–∞–ª–æ–º' },
  { id: 7, name: '–ù–µ–æ–±—ã—á–Ω—ã–µ –∑–≤—É–∫–∏', icon: 'Volume2', description: '–®—ë–ø–æ—Ç –∏ —Ö—Ä–∏–ø—ã –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–∑–≥–∞', check: '–ü–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å' },
  { id: 8, name: '–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', icon: 'MessageSquare', description: '–ü–æ—Ç–µ—Ä—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', check: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É' },
  { id: 9, name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–Ω–∏', icon: 'Sun', description: '–ù–µ–∏–∑—É—á–µ–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –ø–∞—Ä–∞–∑–∏—Ç–∞', check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–Ω—å' },
  { id: 10, name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∞—Ö–∞', icon: 'Scan', description: '–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—Ä–∞–∑–∏—Ç–∞', check: '–ü–æ–Ω—é—Ö–∞—Ç—å' },
];

const dialogues = {
  doorNormal: [
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ø—É—Å—Ç–∏—Ç–µ! –ù–∞ —É–ª–∏—Ü–µ –∂—É—Ç–∫–∏–π —Ö–æ–ª–æ–¥!",
    "–Ø —Å —Å–æ—Å–µ–¥–Ω–µ–π —É–ª–∏—Ü—ã, –¥–æ–º —Ä–∞–∑—Ä—É—à–µ–Ω... –ü–æ–º–æ–≥–∏—Ç–µ!",
    "–Ø –∑–∞–º–µ—Ä–∑–∞—é... –ü—Ä–æ—à—É –≤–∞—Å, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å!",
    "–¢–∞–º –≤—Å–µ –º–µ—Ä—Ç–≤—ã... –Ø –æ–¥–∏–Ω –≤—ã–∂–∏–ª...",
  ],
  doorInfected: [
    "–û—Ç–∫—Ä–æ–π—Ç–µ... –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...",
    "–•–æ–ª–æ–¥–Ω–æ... —Ç–∞–∫ —Ö–æ–ª–æ–¥–Ω–æ... –≤–ø—É—Å—Ç–∏—Ç–µ...",
    "–Ø... —è –Ω–µ –ø–æ–º–Ω—é... –≥–¥–µ —è...",
    "–î–≤–µ—Ä—å... –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å... —Å–µ–π—á–∞—Å...",
  ],
  normal: [
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–ø—É—Å—Ç–∏–ª–∏! –¢–∞–º –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ —Ö–æ–ª–æ–¥–Ω–æ...",
    "–Ø —à—ë–ª –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —Ä–∞–π–æ–Ω–∞, –≤–∏–¥–µ–ª –º–Ω–æ–≥–æ –∑–∞–º—ë—Ä–∑—à–∏—Ö –ª—é–¥–µ–π.",
    "–ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —ç—Ç–æ—Ç –∫–æ—à–º–∞—Ä?",
    "–£ –≤–∞—Å –µ—Å—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–µ—Å—Ç—å? –Ø –Ω–µ –µ–ª –¥–≤–∞ –¥–Ω—è.",
  ],
  infected: [
    "–î–∞... —Ö–æ–ª–æ–¥–Ω–æ –±—ã–ª–æ... –æ—á–µ–Ω—å...",
    "–Ø... —è –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª...",
    "–í —É—à–∞—Ö —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫... –≤—ã —Å–ª—ã—à–∏—Ç–µ?",
    "–ü–æ—á–µ–º—É –≤—ã –Ω–∞ –º–µ–Ω—è —Ç–∞–∫ —Å–º–æ—Ç—Ä–∏—Ç–µ?...",
  ],
  doorResponses: [
    "–ö—Ç–æ –≤—ã?",
    "–û—Ç–∫—É–¥–∞ –≤—ã –ø—Ä–∏—à–ª–∏?",
    "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
    "–í—ã –æ–¥–∏–Ω?",
  ],
  responses: [
    "–û—Ç–∫—É–¥–∞ –≤—ã –ø—Ä–∏—à–ª–∏?",
    "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —É–ª–∏—Ü–µ?",
    "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
    "–í—ã –æ–¥–∏–Ω –±—ã–ª–∏?",
  ]
};

const Index = () => {
  const [gameState, setGameState] = useState<GameState>('menu');
  const [day, setDay] = useState(1);
  const [survivedDays, setSurvivedDays] = useState(0);
  const [peopleInHouse, setPeopleInHouse] = useState<Person[]>([]);
  const [currentArrival, setCurrentArrival] = useState<Person | null>(null);
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [journalEntries, setJournalEntries] = useState<string[]>([]);
  const [aloneWarning, setAloneWarning] = useState(false);
  const [userMessage, setUserMessage] = useState('');
  const [chatHistory, setChatHistory] = useState<{sender: string, text: string}[]>([]);
  const [discoveredTraits, setDiscoveredTraits] = useState<string[]>([]);

  const playSound = (type: 'knock' | 'door' | 'footstep' | 'gunshot' | 'scream') => {
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      switch(type) {
        case 'knock':
          oscillator.frequency.value = 200;
          gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + 0.1);
          break;
        case 'gunshot':
          oscillator.frequency.value = 100;
          gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + 0.2);
          break;
        case 'scream':
          oscillator.frequency.value = 400;
          gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + 0.5);
          break;
        case 'door':
          oscillator.frequency.value = 150;
          gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + 0.3);
          break;
        case 'footstep':
          oscillator.frequency.value = 80;
          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + 0.15);
          break;
      }
    } catch (e) {
      console.log('Audio not supported');
    }
  };

  const generatePerson = (): Person => {
    const isInfected = Math.random() > 0.6;
    const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–ò–≤–∞–Ω', '–ï–ª–µ–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π', '–û–ª—å–≥–∞'];
    const suspiciousCount = isInfected ? Math.floor(Math.random() * 3) + 2 : Math.floor(Math.random() * 2);
    const selectedTraits = [...guestTraits]
      .sort(() => Math.random() - 0.5)
      .slice(0, suspiciousCount)
      .map(t => t.name);

    const doorDialoguePool = isInfected ? dialogues.doorInfected : dialogues.doorNormal;
    const insideDialoguePool = isInfected ? dialogues.infected : dialogues.normal;
    const selectedDialogue = [...doorDialoguePool, ...insideDialoguePool].sort(() => Math.random() - 0.5);

    return {
      id: Date.now(),
      name: names[Math.floor(Math.random() * names.length)],
      isInfected,
      avatar: 'üë§',
      suspiciousTraits: selectedTraits,
      wasChecked: false,
      dialogue: selectedDialogue,
      currentDialogueIndex: 0,
    };
  };

  const startGame = () => {
    setPeopleInHouse([]);
    setDay(1);
    setSurvivedDays(0);
    setJournalEntries(['–î–µ–Ω—å 1: –ù–∞—á–∞–ª—Å—è –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥. –í—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É –æ–ø–∞—Å–Ω–æ. –û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è ‚Äî –≥–æ—Å—Ç–∏ –Ω–∞–π–¥—É—Ç –∏ —É–±—å—é—Ç.']);
    setCurrentArrival(generatePerson());
    setGameState('arrival');
    setAloneWarning(false);
    playSound('knock');
  };

  const startDoorDialogue = () => {
    if (!currentArrival) return;
    setChatHistory([{
      sender: currentArrival.name,
      text: currentArrival.dialogue[0]
    }]);
    setCurrentArrival({...currentArrival, currentDialogueIndex: 0});
    setGameState('door-dialogue');
  };

  const sendDoorMessage = () => {
    if (!userMessage.trim() || !currentArrival) return;
    
    setChatHistory(prev => [...prev, {
      sender: '–í—ã',
      text: userMessage
    }]);

    setTimeout(() => {
      const nextIndex = currentArrival.currentDialogueIndex + 1;
      if (nextIndex < currentArrival.dialogue.length) {
        setChatHistory(prev => [...prev, {
          sender: currentArrival.name,
          text: currentArrival.dialogue[nextIndex]
        }]);
        setCurrentArrival({...currentArrival, currentDialogueIndex: nextIndex});
      } else {
        setChatHistory(prev => [...prev, {
          sender: currentArrival.name,
          text: currentArrival.isInfected 
            ? "–ü—É—Å—Ç–∏—Ç–µ... –ø–æ–∂–∞–ª—É–π—Å—Ç–∞... —Ö–æ–ª–æ–¥–Ω–æ..." 
            : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å! –Ø –∑–∞–º–µ—Ä–∑–∞—é!"
        }]);
      }
    }, 1000);

    setUserMessage('');
  };

  const letPersonIn = () => {
    if (!currentArrival) return;
    
    playSound('door');
    setTimeout(() => playSound('footstep'), 300);
    
    setPeopleInHouse(prev => [...prev, currentArrival]);
    setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –í–ø—É—Å—Ç–∏–ª–∏ ${currentArrival.name} –≤ –¥–æ–º.`]);
    setCurrentArrival(null);
    setChatHistory([]);
    setGameState('house');
    setAloneWarning(false);
  };

  const denyPerson = () => {
    if (!currentArrival) return;
    
    playSound('door');
    setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –û—Ç–∫–∞–∑–∞–ª–∏ ${currentArrival.name}. –û–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–æ—Ä–æ–∑–µ...`]);
    setCurrentArrival(null);
    setChatHistory([]);
    setGameState('house');
  };

  const startInspection = (person: Person) => {
    setSelectedPerson(person);
    setChatHistory([]);
    setDiscoveredTraits([]);
    setGameState('inspection');
  };

  const checkTrait = (traitName: string) => {
    if (!selectedPerson || discoveredTraits.includes(traitName)) return;
    
    playSound('footstep');
    setDiscoveredTraits(prev => [...prev, traitName]);
    
    if (selectedPerson.suspiciousTraits.includes(traitName)) {
      setChatHistory(prev => [...prev, {
        sender: 'system',
        text: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–∑–Ω–∞–∫: ${traitName}`
      }]);
    } else {
      setChatHistory(prev => [...prev, {
        sender: 'system',
        text: `‚úì ${traitName}: –Ω–æ—Ä–º–∞`
      }]);
    }
  };

  const talkToPerson = () => {
    if (!selectedPerson) return;
    
    setGameState('dialogue');
    setChatHistory([{
      sender: selectedPerson.name,
      text: selectedPerson.dialogue[0]
    }]);
  };

  const sendMessage = () => {
    if (!userMessage.trim() || !selectedPerson) return;
    
    setChatHistory(prev => [...prev, {
      sender: '–í—ã',
      text: userMessage
    }]);

    setTimeout(() => {
      const nextIndex = selectedPerson.currentDialogueIndex + 1;
      if (nextIndex < selectedPerson.dialogue.length) {
        setChatHistory(prev => [...prev, {
          sender: selectedPerson.name,
          text: selectedPerson.dialogue[nextIndex]
        }]);
        setSelectedPerson({...selectedPerson, currentDialogueIndex: nextIndex});
      } else {
        setChatHistory(prev => [...prev, {
          sender: selectedPerson.name,
          text: selectedPerson.isInfected 
            ? "–Ø... —è —Ö–æ—á—É —Å–ø–∞—Ç—å..." 
            : "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å. –ù–∞–¥–µ—é—Å—å, –º—ã –≤—ã–∂–∏–≤–µ–º."
        }]);
      }
    }, 1000);

    setUserMessage('');
  };

  const shootPerson = () => {
    if (!selectedPerson) return;
    
    playSound('gunshot');
    
    if (selectedPerson.isInfected) {
      playSound('scream');
      setPeopleInHouse(prev => prev.filter(p => p.id !== selectedPerson.id));
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ó–∞—Å—Ç—Ä–µ–ª–∏–ª–∏ ${selectedPerson.name}. –≠—Ç–æ –±—ã–ª –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã–π. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.`]);
    } else {
      setPeopleInHouse(prev => prev.filter(p => p.id !== selectedPerson.id));
      setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ó–∞—Å—Ç—Ä–µ–ª–∏–ª–∏ –Ω–µ–≤–∏–Ω–Ω–æ–≥–æ ${selectedPerson.name}... –û—à–∏–±–∫–∞.`]);
    }
    
    setSelectedPerson(null);
    setGameState('house');
  };

  const finishInspection = () => {
    if (!selectedPerson) return;
    
    setPeopleInHouse(prev => 
      prev.map(p => p.id === selectedPerson.id ? { ...p, wasChecked: true } : p)
    );
    
    setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ü—Ä–æ–≤–µ—Ä–∫–∞ ${selectedPerson.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`]);
    setSelectedPerson(null);
    setGameState('house');
  };

  const endDay = () => {
    const uncheckedInfected = peopleInHouse.find(p => p.isInfected && !p.wasChecked);
    
    if (uncheckedInfected) {
      playSound('scream');
      setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: ${uncheckedInfected.name} –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç—Ä–æ–ª—å. –ü–∞—Ä–∞–∑–∏—Ç –≤–∑—è–ª –≤–µ—Ä—Ö. –í—Å–µ –º–µ—Ä—Ç–≤—ã.`]);
      setTimeout(() => {
        setGameState('menu');
      }, 2000);
      return;
    }

    if (peopleInHouse.length === 0) {
      setAloneWarning(true);
      playSound('scream');
      setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –æ–¥–∏–Ω. –ì–æ—Å—Ç–∏ –ø—Ä–∏–¥—É—Ç –∏ —É–±—å—é—Ç –≤–∞—Å...`]);
      setTimeout(() => {
        setJournalEntries(prev => [...prev, `–î–µ–Ω—å ${day}: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ì–æ—Å—Ç–∏ –Ω–∞—à–ª–∏ –≤–∞—Å –æ–¥–Ω–æ–≥–æ.`]);
        setGameState('menu');
      }, 2000);
      return;
    }

    setDay(prev => prev + 1);
    setSurvivedDays(prev => prev + 1);
    setJournalEntries(prev => [...prev, `–ù–æ—á—å –¥–Ω—è ${day}: –î–µ–Ω—å –ø—Ä–æ—à—ë–ª. –í—Å–µ –∂–∏–≤—ã. –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏.`]);
    setCurrentArrival(generatePerson());
    setGameState('arrival');
    playSound('knock');
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      {gameState === 'menu' && (
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-b from-background to-card">
          <div className="text-center space-y-8 animate-fade-in">
            <div className="space-y-4">
              <h1 className="text-5xl font-bold text-primary animate-flicker">No, I'm not a human</h1>
              <p className="text-xl text-muted-foreground">–•–æ—Ä—Ä–æ—Ä –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ</p>
              <p className="text-sm text-muted-foreground max-w-md mx-auto px-4">
                –ü–∞—Ä–∞–∑–∏—Ç—ã-–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –ø—Ä–æ–Ω–∏–∫–∞—é—Ç —á–µ—Ä–µ–∑ —É—à–∏ –∑–∞–º—ë—Ä–∑—à–∏—Ö –ª—é–¥–µ–π. 
                –û–±—â–∞–π—Ç–µ—Å—å, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –≤—ã–∂–∏–≤–∞–π—Ç–µ. –ù–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –æ–¥–Ω–∏...
              </p>
            </div>
            
            <div className="space-y-4 max-w-md mx-auto px-4">
              <Button 
                onClick={startGame}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground border-2 border-primary"
                size="lg"
              >
                –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
              </Button>
              
              <Button 
                onClick={() => setGameState('kcs')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°
              </Button>

              <Button 
                onClick={() => setGameState('journal')}
                variant="outline"
                className="w-full border-2"
                size="lg"
              >
                –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
              </Button>
            </div>

            {survivedDays > 0 && (
              <div className="text-muted-foreground">
                <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {survivedDays} {survivedDays === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {gameState === 'arrival' && currentArrival && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ú–µ–Ω—é
              </Button>
              
              <Badge variant="outline" className="text-lg px-4 py-2">
                <Icon name="Calendar" className="mr-2" size={16} />
                –î–µ–Ω—å {day}
              </Badge>

              <Button 
                variant="outline" 
                onClick={() => setGameState('kcs')}
                className="border-2"
              >
                <Icon name="BookOpen" className="mr-2" size={16} />
                –ö–ß–°
              </Button>
            </div>

            <Alert className="border-primary/50">
              <Icon name="Users" className="h-4 w-4" />
              <AlertDescription>
                –í –¥–æ–º–µ: {peopleInHouse.length} {peopleInHouse.length === 1 ? '—á–µ–ª–æ–≤–µ–∫' : '—á–µ–ª–æ–≤–µ–∫–∞'}
                {peopleInHouse.length === 0 && ' ‚Äî –û–ü–ê–°–ù–û! –û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è!'}
              </AlertDescription>
            </Alert>

            <Card className="p-8 bg-card border-2 animate-fade-in">
              <div className="space-y-6">
                <div className="text-center space-y-4">
                  <Icon name="DoorOpen" className="mx-auto text-primary animate-pulse-danger" size={64} />
                  <h2 className="text-3xl font-bold">–°—Ç—É–∫ –≤ –¥–≤–µ—Ä—å</h2>
                  <div className="text-6xl">{currentArrival.avatar}</div>
                  <h3 className="text-2xl">{currentArrival.name}</h3>
                  <p className="text-muted-foreground italic">
                    "–ü—É—Å—Ç–∏—Ç–µ! –ù–∞ —É–ª–∏—Ü–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —Ö–æ–ª–æ–¥! –ü—Ä–æ—à—É –≤–∞—Å!"
                  </p>
                </div>

                <div className="bg-secondary/30 p-4 rounded-lg">
                  <p className="text-sm text-muted-foreground mb-2">
                    <Icon name="Info" className="inline mr-2" size={16} />
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ –≤–ø—É—Å—Ç–∏—Ç–µ
                  </p>
                </div>

                <div className="flex gap-4">
                  <Button 
                    onClick={startDoorDialogue}
                    className="flex-1 bg-primary hover:bg-primary/90 border-2 border-primary"
                    size="lg"
                  >
                    <Icon name="MessageCircle" className="mr-2" size={20} />
                    –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å
                  </Button>
                  <Button 
                    onClick={letPersonIn}
                    variant="outline"
                    className="flex-1 border-2"
                    size="lg"
                  >
                    <Icon name="DoorOpen" className="mr-2" size={20} />
                    –í–ø—É—Å—Ç–∏—Ç—å
                  </Button>
                  <Button 
                    onClick={denyPerson}
                    variant="outline"
                    className="flex-1 border-2"
                    size="lg"
                  >
                    <Icon name="DoorClosed" className="mr-2" size={20} />
                    –û—Ç–∫–∞–∑–∞—Ç—å
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'house' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ú–µ–Ω—é
              </Button>
              
              <Badge variant="outline" className="text-lg px-4 py-2">
                <Icon name="Calendar" className="mr-2" size={16} />
                –î–µ–Ω—å {day}
              </Badge>

              <Button 
                variant="outline" 
                onClick={() => setGameState('kcs')}
                className="border-2"
              >
                <Icon name="BookOpen" className="mr-2" size={16} />
                –ö–ß–°
              </Button>
            </div>

            {aloneWarning && (
              <Alert variant="destructive" className="animate-pulse-danger">
                <Icon name="AlertTriangle" className="h-4 w-4" />
                <AlertDescription>
                  –û–ü–ê–°–ù–û! –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –æ–¥–∏–Ω. –ì–æ—Å—Ç–∏ –ø—Ä–∏–¥—É—Ç –Ω–æ—á—å—é...
                </AlertDescription>
              </Alert>
            )}

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-bold">
                    <Icon name="Home" className="inline mr-2" size={24} />
                    –í –¥–æ–º–µ
                  </h2>
                  <Badge variant="outline">
                    –õ—é–¥–µ–π: {peopleInHouse.length}
                  </Badge>
                </div>

                {peopleInHouse.length === 0 ? (
                  <div className="text-center py-12 text-muted-foreground">
                    <Icon name="Users" className="mx-auto mb-4 opacity-50" size={48} />
                    <p>–í –¥–æ–º–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç</p>
                    <p className="text-sm mt-2 text-destructive">–û–¥–Ω–æ–º—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ–ø–∞—Å–Ω–æ!</p>
                  </div>
                ) : (
                  <div className="grid gap-4 md:grid-cols-2">
                    {peopleInHouse.map((person) => (
                      <Card key={person.id} className="p-4 bg-secondary/50">
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="text-3xl">{person.avatar}</div>
                              <div>
                                <h3 className="font-semibold">{person.name}</h3>
                                {person.wasChecked && (
                                  <Badge variant="default" className="text-xs">
                                    –ü—Ä–æ–≤–µ—Ä–µ–Ω
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>

                          <Button 
                            onClick={() => startInspection(person)}
                            size="sm"
                            variant="outline"
                            className="w-full"
                          >
                            <Icon name="Search" className="mr-1" size={14} />
                            {person.wasChecked ? '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
                          </Button>
                        </div>
                      </Card>
                    ))}
                  </div>
                )}

                <Button 
                  onClick={endDay}
                  className="w-full bg-primary hover:bg-primary/90 border-2 border-primary"
                  size="lg"
                >
                  <Icon name="Moon" className="mr-2" size={20} />
                  –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–Ω—å
                </Button>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'inspection' && selectedPerson && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={finishInspection}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –í–µ—Ä–Ω—É—Ç—å—Å—è
              </Button>
              
              <h2 className="text-2xl font-bold">–ü—Ä–æ–≤–µ—Ä–∫–∞: {selectedPerson.name}</h2>

              <Button 
                variant="destructive" 
                onClick={shootPerson}
                className="border-2"
              >
                <Icon name="Skull" className="mr-2" size={16} />
                –ó–∞—Å—Ç—Ä–µ–ª–∏—Ç—å
              </Button>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              <Card className="p-6 bg-card border-2">
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-8xl mb-4">{selectedPerson.avatar}</div>
                    <h3 className="text-2xl font-bold">{selectedPerson.name}</h3>
                  </div>

                  <Button 
                    onClick={talkToPerson}
                    className="w-full bg-primary"
                    size="lg"
                  >
                    <Icon name="MessageCircle" className="mr-2" size={20} />
                    –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å
                  </Button>

                  <div className="space-y-2">
                    <p className="text-sm font-semibold text-muted-foreground">–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</p>
                    <div className="grid grid-cols-2 gap-2">
                      {guestTraits.slice(0, 6).map((trait) => (
                        <Button
                          key={trait.id}
                          onClick={() => checkTrait(trait.name)}
                          variant={discoveredTraits.includes(trait.name) ? "secondary" : "outline"}
                          size="sm"
                          className="text-xs"
                          disabled={discoveredTraits.includes(trait.name)}
                        >
                          <Icon name={trait.icon as any} className="mr-1" size={12} />
                          {trait.check}
                        </Button>
                      ))}
                    </div>
                  </div>
                </div>
              </Card>

              <Card className="p-6 bg-card border-2">
                <div className="space-y-4">
                  <h3 className="font-bold flex items-center">
                    <Icon name="ClipboardList" className="mr-2" size={20} />
                    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
                  </h3>

                  <ScrollArea className="h-[400px]">
                    <div className="space-y-2">
                      {chatHistory.map((msg, idx) => (
                        <div 
                          key={idx}
                          className={`p-3 rounded-lg ${
                            msg.sender === 'system' 
                              ? 'bg-secondary/50 text-sm' 
                              : 'bg-primary/10'
                          }`}
                        >
                          <p className="font-semibold text-xs text-muted-foreground">{msg.sender}</p>
                          <p className="text-sm">{msg.text}</p>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>

                  {discoveredTraits.length > 0 && (
                    <div className="space-y-2">
                      <p className="text-sm font-semibold">–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</p>
                      <div className="flex flex-wrap gap-2">
                        {discoveredTraits.filter(t => selectedPerson.suspiciousTraits.includes(t)).map((trait, idx) => (
                          <Badge key={idx} variant="destructive" className="text-xs">
                            {trait}
                          </Badge>
                        ))}
                      </div>
                      {discoveredTraits.filter(t => selectedPerson.suspiciousTraits.includes(t)).length === 0 && (
                        <p className="text-sm text-muted-foreground">–ü–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>
                      )}
                    </div>
                  )}
                </div>
              </Card>
            </div>
          </div>
        </div>
      )}

      {gameState === 'door-dialogue' && currentArrival && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => {
                  setChatHistory([]);
                  setGameState('arrival');
                }}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              
              <h2 className="text-2xl font-bold">–†–∞–∑–≥–æ–≤–æ—Ä —É –¥–≤–µ—Ä–∏: {currentArrival.name}</h2>
              
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="text-center mb-4">
                  <Icon name="DoorClosed" className="mx-auto mb-2 text-primary" size={48} />
                  <div className="text-6xl mb-2">{currentArrival.avatar}</div>
                  <h3 className="text-xl font-bold">{currentArrival.name}</h3>
                  <p className="text-sm text-muted-foreground">–ó–∞ –¥–≤–µ—Ä—å—é</p>
                </div>

                <ScrollArea className="h-[400px] border rounded-lg p-4 bg-secondary/20">
                  <div className="space-y-3">
                    {chatHistory.map((msg, idx) => (
                      <div 
                        key={idx}
                        className={`p-3 rounded-lg ${
                          msg.sender === '–í—ã' 
                            ? 'bg-primary/20 ml-8' 
                            : 'bg-card mr-8'
                        }`}
                      >
                        <p className="font-semibold text-xs text-muted-foreground mb-1">{msg.sender}</p>
                        <p className="text-sm">{msg.text}</p>
                      </div>
                    ))}
                  </div>
                </ScrollArea>

                <div className="flex gap-2">
                  <Textarea
                    value={userMessage}
                    onChange={(e) => setUserMessage(e.target.value)}
                    placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —á–µ—Ä–µ–∑ –¥–≤–µ—Ä—å..."
                    className="flex-1"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendDoorMessage();
                      }
                    }}
                  />
                  <Button onClick={sendDoorMessage} size="lg">
                    <Icon name="Send" size={20} />
                  </Button>
                </div>

                <div className="grid grid-cols-2 gap-2">
                  {dialogues.doorResponses.map((response, idx) => (
                    <Button
                      key={idx}
                      onClick={() => {
                        setUserMessage(response);
                      }}
                      variant="outline"
                      size="sm"
                      className="text-xs"
                    >
                      {response}
                    </Button>
                  ))}
                </div>

                <div className="flex gap-2 pt-4 border-t">
                  <Button 
                    onClick={letPersonIn}
                    className="flex-1 bg-primary hover:bg-primary/90"
                    size="lg"
                  >
                    <Icon name="DoorOpen" className="mr-2" size={20} />
                    –í–ø—É—Å—Ç–∏—Ç—å
                  </Button>
                  <Button 
                    onClick={denyPerson}
                    variant="destructive"
                    className="flex-1"
                    size="lg"
                  >
                    <Icon name="DoorClosed" className="mr-2" size={20} />
                    –û—Ç–∫–∞–∑–∞—Ç—å
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'dialogue' && selectedPerson && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('inspection')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ö –ø—Ä–æ–≤–µ—Ä–∫–µ
              </Button>
              
              <h2 className="text-2xl font-bold">–†–∞–∑–≥–æ–≤–æ—Ä: {selectedPerson.name}</h2>
              
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="text-center mb-4">
                  <div className="text-6xl mb-2">{selectedPerson.avatar}</div>
                  <h3 className="text-xl font-bold">{selectedPerson.name}</h3>
                </div>

                <ScrollArea className="h-[400px] border rounded-lg p-4 bg-secondary/20">
                  <div className="space-y-3">
                    {chatHistory.map((msg, idx) => (
                      <div 
                        key={idx}
                        className={`p-3 rounded-lg ${
                          msg.sender === '–í—ã' 
                            ? 'bg-primary/20 ml-8' 
                            : 'bg-card mr-8'
                        }`}
                      >
                        <p className="font-semibold text-xs text-muted-foreground mb-1">{msg.sender}</p>
                        <p className="text-sm">{msg.text}</p>
                      </div>
                    ))}
                  </div>
                </ScrollArea>

                <div className="flex gap-2">
                  <Textarea
                    value={userMessage}
                    onChange={(e) => setUserMessage(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                    className="flex-1"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                      }
                    }}
                  />
                  <Button onClick={sendMessage} size="lg">
                    <Icon name="Send" size={20} />
                  </Button>
                </div>

                <div className="grid grid-cols-2 gap-2">
                  {dialogues.responses.map((response, idx) => (
                    <Button
                      key={idx}
                      onClick={() => {
                        setUserMessage(response);
                      }}
                      variant="outline"
                      size="sm"
                      className="text-xs"
                    >
                      {response}
                    </Button>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'kcs' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState(currentArrival ? 'arrival' : peopleInHouse.length > 0 ? 'house' : 'menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ö–ß–°</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <div className="space-y-4">
                <div className="space-y-2">
                  <h2 className="text-xl font-bold flex items-center">
                    <Icon name="Shield" className="mr-2 text-primary" size={24} />
                    –ö–æ–º–∏—Ç–µ—Ç –ø–æ –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–º –°–∏—Ç—É–∞—Ü–∏—è–º
                  </h2>
                  <Alert>
                    <Icon name="Bug" className="h-4 w-4" />
                    <AlertDescription>
                      <strong>–ü–∞—Ä–∞–∑–∏—Ç-–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω:</strong> –ü—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤ –º–æ–∑–≥ —á–µ—Ä–µ–∑ —É—Ö–æ –∑–∞–º—ë—Ä–∑—à–∏—Ö –ª—é–¥–µ–π. 
                      –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å, –≤–ø–∞–¥–∞—é—Ç –≤ –±–µ–∑—É–º–∏–µ –∏ —É–±–∏–≤–∞—é—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.
                    </AlertDescription>
                  </Alert>
                </div>

                <div className="grid gap-4 md:grid-cols-2">
                  {guestTraits.map((trait) => (
                    <Card key={trait.id} className="p-4 bg-secondary/50 hover:bg-secondary transition-colors">
                      <div className="flex items-start gap-3">
                        <Icon name={trait.icon as any} className="text-primary mt-1" size={20} />
                        <div className="space-y-1">
                          <h3 className="font-semibold">{trait.name}</h3>
                          <p className="text-sm text-muted-foreground">{trait.description}</p>
                          <Badge variant="outline" className="text-xs mt-1">
                            {trait.check}
                          </Badge>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        </div>
      )}

      {gameState === 'journal' && (
        <div className="min-h-screen p-4">
          <div className="max-w-4xl mx-auto space-y-6">
            <div className="flex justify-between items-center">
              <Button 
                variant="outline" 
                onClick={() => setGameState('menu')}
                className="border-2"
              >
                <Icon name="ArrowLeft" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
              <h1 className="text-3xl font-bold">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π</h1>
              <div className="w-24"></div>
            </div>

            <Card className="p-6 bg-card border-2">
              <ScrollArea className="h-[600px] pr-4">
                <div className="space-y-4">
                  {journalEntries.map((entry, idx) => (
                    <div key={idx} className="border-l-2 border-primary pl-4 py-2">
                      <p className="text-sm text-muted-foreground">–ó–∞–ø–∏—Å—å #{idx + 1}</p>
                      <p>{entry}</p>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
};

export default Index;