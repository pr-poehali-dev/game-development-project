import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface HouseActivitiesProps {
  onBack: () => void;
  addJournalEntry: (entry: string) => void;
  playSound: (type: string) => void;
  day: number;
}

const HouseActivities = ({ onBack, addJournalEntry, playSound, day }: HouseActivitiesProps) => {
  const [inventory, setInventory] = useState<string[]>([]);
  const [discovered, setDiscovered] = useState<string[]>([]);
  const [miniGameActive, setMiniGameActive] = useState<string | null>(null);
  const [lockpickAttempts, setLockpickAttempts] = useState(3);
  const [radioFrequency, setRadioFrequency] = useState(87.5);
  const [cardDrawn, setCardDrawn] = useState<string | null>(null);

  const searchLocations = [
    { id: 'basement', name: 'üî¶ –ü–æ–¥–≤–∞–ª', danger: 70, items: ['üóùÔ∏è –°—Ç–∞—Ä—ã–π –∫–ª—é—á', 'üì¶ –Ø—â–∏–∫ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞–º–∏', 'üîã –ë–∞—Ç–∞—Ä–µ–π–∫–∏'] },
    { id: 'attic', name: 'ü™ú –ß–µ—Ä–¥–∞–∫', danger: 50, items: ['üìª –°—Ç–∞—Ä–æ–µ —Ä–∞–¥–∏–æ', 'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', 'üé≠ –ú–∞—Å–∫–∞'] },
    { id: 'kitchen', name: 'üç≥ –ö—É—Ö–Ω—è', danger: 20, items: ['üî™ –ù–æ–∂', 'üßÇ –°–æ–ª—å', 'üçû –•–ª–µ–±'] },
    { id: 'bathroom', name: 'üöø –í–∞–Ω–Ω–∞—è', danger: 40, items: ['üíä –ê–ø—Ç–µ—á–∫–∞', 'ü™í –ë—Ä–∏—Ç–≤–∞', 'ü™û –ó–µ—Ä–∫–∞–ª–æ'] },
    { id: 'closet', name: 'üö™ –ö–ª–∞–¥–æ–≤–∫–∞', danger: 60, items: ['‚öíÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'üïØÔ∏è –°–≤–µ—á–∏', 'üßπ –ú–µ—Ç–ª–∞'] },
  ];

  const radioStations = [
    { freq: 88.3, name: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–µ—â–∞–Ω–∏–µ', message: '‚ö†Ô∏è –í—Å–µ–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –¥–æ–º–∞. –ü–∞—Ä–∞–∑–∏—Ç—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–º—ë—Ä–∑—à–∏—Ö.' },
    { freq: 92.7, name: '–ú—É–∑—ã–∫–∞ –∫–æ–Ω—Ü–∞ —Å–≤–µ—Ç–∞', message: 'üéµ *–∏–≥—Ä–∞–µ—Ç –ø–µ—á–∞–ª—å–Ω–∞—è –º–µ–ª–æ–¥–∏—è* ...–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞...' },
    { freq: 101.1, name: '–®–∏—Ñ—Ä –ö–ß–°', message: 'üì° ...–∫–æ–¥ 7-4-3...–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...–æ—á–∞–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω...' },
    { freq: 105.5, name: '–ü–æ–º–µ—Ö–∏', message: 'üì¢ *—à–∏–ø–µ–Ω–∏–µ* ...–∫—Ç–æ-–Ω–∏–±—É–¥—å...—Å–ª—ã—à–∏—Ç...–ø–æ–º–æ–≥–∏—Ç–µ...*—Ç—Ä–µ—Å–∫*' },
  ];

  const tarotCards = [
    { name: '‚ò†Ô∏è –°–º–µ—Ä—Ç—å', effect: 'bad', message: '–°–º–µ—Ä—Ç—å –Ω–µ–∏–∑–±–µ–∂–Ω–∞. –°–µ–≥–æ–¥–Ω—è –∫—Ç–æ-—Ç–æ —É–º—Ä—ë—Ç.' },
    { name: '‚≠ê –ó–≤–µ–∑–¥–∞', effect: 'good', message: '–ù–∞–¥–µ–∂–¥–∞. –¢—ã –Ω–∞–π–¥—ë—à—å —Ç–æ, —á—Ç–æ –∏—â–µ—à—å.' },
    { name: 'üåô –õ—É–Ω–∞', effect: 'neutral', message: '–û–±–º–∞–Ω. –ù–µ –≤–µ—Ä—å —Ç–æ–º—É, —á—Ç–æ –≤–∏–¥–∏—à—å.' },
    { name: '‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ', effect: 'good', message: '–°–≤–µ—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ.' },
    { name: 'üëπ –î—å—è–≤–æ–ª', effect: 'bad', message: '–ò—Å–∫—É—à–µ–Ω–∏–µ. –ü–∞—Ä–∞–∑–∏—Ç –±–ª–∏–∑–∫–æ.' },
    { name: 'üó°Ô∏è –ú–µ—á', effect: 'neutral', message: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç. –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.' },
  ];

  const searchLocation = (locationId: string) => {
    playSound('click');
    const location = searchLocations.find(l => l.id === locationId);
    if (!location) return;

    const isDangerous = Math.random() * 100 < location.danger;
    
    if (isDangerous) {
      const dangers = [
        'üíÄ –¢—ã –Ω–∞—à—ë–ª —Ç—Ä—É–ø! –û–Ω —É–∂–µ –¥–∞–≤–Ω–æ –º—ë—Ä—Ç–≤...',
        'ü¶† –ü–∞—Ä–∞–∑–∏—Ç –≤—ã–ø–æ–ª–∑ –∏–∑ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏! –¢—ã –µ–ª–µ —É–±–µ–∂–∞–ª!',
        'üï∑Ô∏è –û–≥—Ä–æ–º–Ω—ã–π –ø–∞—É–∫! –¢—ã –≤ –ø–∞–Ω–∏–∫–µ –≤—ã–±–µ–∂–∞–ª –æ—Ç—Ç—É–¥–∞!',
        'üëª –°—Ç—Ä–∞–Ω–Ω—ã–π —à—É–º... –ö—Ç–æ-—Ç–æ –∑–¥–µ—Å—å –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ...',
      ];
      const danger = dangers[Math.floor(Math.random() * dangers.length)];
      setDiscovered(prev => [...prev, `${location.name}: ${danger}`]);
      addJournalEntry(`–î–µ–Ω—å ${day}: –û–±—ã—Å–∫–∞–ª ${location.name}. ${danger}`);
    } else {
      const foundItem = location.items[Math.floor(Math.random() * location.items.length)];
      setInventory(prev => [...prev, foundItem]);
      setDiscovered(prev => [...prev, `${location.name}: –ù–∞–π–¥–µ–Ω–æ ‚Äî ${foundItem}`]);
      addJournalEntry(`–î–µ–Ω—å ${day}: –û–±—ã—Å–∫–∞–ª ${location.name}. –ù–∞–π–¥–µ–Ω–æ: ${foundItem}`);
      playSound('door');
    }
  };

  const tryLockpick = () => {
    if (lockpickAttempts <= 0) return;
    playSound('click');
    
    const success = Math.random() > 0.6;
    setLockpickAttempts(prev => prev - 1);

    if (success) {
      const treasures = ['üíé –ê–ª–º–∞–∑', 'üîë –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á', 'üìú –ö–∞—Ä—Ç–∞', 'üéÅ –ó–∞–≥–∞–¥–æ—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞'];
      const treasure = treasures[Math.floor(Math.random() * treasures.length)];
      setInventory(prev => [...prev, treasure]);
      setDiscovered(prev => [...prev, `üîì –í–∑–ª–æ–º —É—Å–ø–µ—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ: ${treasure}`]);
      addJournalEntry(`–î–µ–Ω—å ${day}: –í–∑–ª–æ–º–∞–ª –∑–∞–º–æ–∫! –ù–∞–π–¥–µ–Ω–æ: ${treasure}`);
      setMiniGameActive(null);
      playSound('door');
    } else {
      setDiscovered(prev => [...prev, `üîí –ù–µ—É–¥–∞—á–∞! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${lockpickAttempts - 1}`]);
      if (lockpickAttempts - 1 <= 0) {
        setDiscovered(prev => [...prev, '‚ùå –ó–∞–º–æ–∫ —Å–ª–æ–º–∞–Ω. –ü–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å.']);
        setMiniGameActive(null);
      }
    }
  };

  const tuneRadio = (freq: number) => {
    setRadioFrequency(freq);
    const station = radioStations.find(s => Math.abs(s.freq - freq) < 0.5);
    if (station) {
      playSound('ambient');
      setDiscovered(prev => [...prev, `üìª ${station.name}: ${station.message}`]);
      addJournalEntry(`–î–µ–Ω—å ${day}: –ü–æ–π–º–∞–ª —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é: ${station.message}`);
    }
  };

  const drawCard = () => {
    playSound('click');
    const card = tarotCards[Math.floor(Math.random() * tarotCards.length)];
    setCardDrawn(card.name);
    setDiscovered(prev => [...prev, `üé¥ –ö–∞—Ä—Ç–∞ –¢–∞—Ä–æ: ${card.name} ‚Äî ${card.message}`]);
    addJournalEntry(`–î–µ–Ω—å ${day}: –í—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É: ${card.name}. ${card.message}`);
  };

  if (miniGameActive === 'lockpick') {
    return (
      <div className="min-h-screen p-4 bg-black/90">
        <div className="max-w-4xl mx-auto space-y-6 pt-20">
          <Card className="p-8 bg-card border-4 border-primary">
            <div className="space-y-6 text-center">
              <h2 className="text-3xl font-bold">üîì –í–∑–ª–æ–º –∑–∞–º–∫–∞</h2>
              <div className="text-9xl">üîí</div>
              <p className="text-xl">–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {lockpickAttempts}/3</p>
              <p className="text-sm text-muted-foreground">–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: 40%</p>
              
              <div className="space-y-3">
                <Button
                  onClick={tryLockpick}
                  disabled={lockpickAttempts <= 0}
                  size="lg"
                  className="w-full"
                >
                  –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–∑–ª–æ–º–∞—Ç—å
                </Button>
                <Button
                  onClick={() => setMiniGameActive(null)}
                  variant="outline"
                  size="lg"
                  className="w-full"
                >
                  –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (miniGameActive === 'radio') {
    return (
      <div className="min-h-screen p-4 bg-black/90">
        <div className="max-w-4xl mx-auto space-y-6 pt-20">
          <Card className="p-8 bg-card border-4 border-primary">
            <div className="space-y-6">
              <h2 className="text-3xl font-bold text-center">üìª –†–∞–¥–∏–æ</h2>
              <div className="text-9xl text-center">üì°</div>
              
              <div className="space-y-4">
                <div className="text-center">
                  <p className="text-4xl font-bold">{radioFrequency.toFixed(1)} FM</p>
                </div>
                
                <input
                  type="range"
                  min="87"
                  max="108"
                  step="0.1"
                  value={radioFrequency}
                  onChange={(e) => tuneRadio(parseFloat(e.target.value))}
                  className="w-full h-4 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                />

                <div className="grid grid-cols-2 gap-2">
                  {radioStations.map((station) => (
                    <Button
                      key={station.freq}
                      onClick={() => tuneRadio(station.freq)}
                      variant="outline"
                      size="sm"
                    >
                      {station.freq} FM
                    </Button>
                  ))}
                </div>
              </div>

              <Button
                onClick={() => setMiniGameActive(null)}
                variant="outline"
                size="lg"
                className="w-full"
              >
                –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–¥–∏–æ
              </Button>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (miniGameActive === 'tarot') {
    return (
      <div className="min-h-screen p-4 bg-black/90">
        <div className="max-w-4xl mx-auto space-y-6 pt-20">
          <Card className="p-8 bg-card border-4 border-purple-500">
            <div className="space-y-6 text-center">
              <h2 className="text-3xl font-bold">üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ</h2>
              <div className="text-9xl">{cardDrawn || 'üé¥'}</div>
              
              {cardDrawn && (
                <div className="bg-purple-900/50 p-6 rounded-lg">
                  <p className="text-2xl font-bold">{cardDrawn}</p>
                  <p className="text-lg mt-4">{tarotCards.find(c => c.name === cardDrawn)?.message}</p>
                </div>
              )}

              <div className="space-y-3">
                <Button
                  onClick={drawCard}
                  size="lg"
                  className="w-full"
                >
                  –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É
                </Button>
                <Button
                  onClick={() => {
                    setMiniGameActive(null);
                    setCardDrawn(null);
                  }}
                  variant="outline"
                  size="lg"
                  className="w-full"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-4">
      <div className="max-w-4xl mx-auto space-y-6 pt-8">
        <div className="flex justify-between items-center">
          <Button variant="outline" onClick={onBack}>
            <Icon name="ArrowLeft" className="mr-2" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <h2 className="text-3xl font-bold">üè† –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–æ–º–µ</h2>
          <div className="w-24"></div>
        </div>

        {inventory.length > 0 && (
          <Card className="p-4 bg-primary/10">
            <h3 className="font-bold mb-3 flex items-center gap-2">
              <Icon name="Package" size={20} />
              –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ({inventory.length})
            </h3>
            <div className="flex flex-wrap gap-2">
              {inventory.map((item, idx) => (
                <Badge key={idx} variant="secondary" className="text-sm">
                  {item}
                </Badge>
              ))}
            </div>
          </Card>
        )}

        {discovered.length > 0 && (
          <Card className="p-4 bg-muted/50">
            <h3 className="font-bold mb-3 flex items-center gap-2">
              <Icon name="Scroll" size={20} />
              –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            </h3>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {discovered.slice(-5).reverse().map((d, idx) => (
                <p key={idx} className="text-sm">‚Ä¢ {d}</p>
              ))}
            </div>
          </Card>
        )}

        <Card className="p-6">
          <h3 className="text-2xl font-bold mb-6">üîç –û–±—ã—Å–∫–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã</h3>
          <div className="grid grid-cols-2 gap-4">
            {searchLocations.map((location) => (
              <Button
                key={location.id}
                onClick={() => searchLocation(location.id)}
                variant="outline"
                className="h-20 text-lg"
              >
                <div className="flex flex-col items-center gap-2">
                  <span>{location.name}</span>
                  <Badge variant={location.danger > 60 ? "destructive" : location.danger > 40 ? "secondary" : "default"} className="text-xs">
                    –û–ø–∞—Å–Ω–æ—Å—Ç—å: {location.danger}%
                  </Badge>
                </div>
              </Button>
            ))}
          </div>
        </Card>

        <Card className="p-6">
          <h3 className="text-2xl font-bold mb-6">üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã</h3>
          <div className="grid grid-cols-3 gap-4">
            <Button
              onClick={() => {
                setMiniGameActive('lockpick');
                setLockpickAttempts(3);
              }}
              size="lg"
              variant="outline"
              className="h-32 flex flex-col gap-3"
            >
              <div className="text-5xl">üîì</div>
              <span>–í–∑–ª–æ–º –∑–∞–º–∫–∞</span>
            </Button>
            
            <Button
              onClick={() => setMiniGameActive('radio')}
              size="lg"
              variant="outline"
              className="h-32 flex flex-col gap-3"
            >
              <div className="text-5xl">üìª</div>
              <span>–†–∞–¥–∏–æ</span>
            </Button>

            <Button
              onClick={() => setMiniGameActive('tarot')}
              size="lg"
              variant="outline"
              className="h-32 flex flex-col gap-3"
            >
              <div className="text-5xl">üîÆ</div>
              <span>–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ</span>
            </Button>
          </div>
        </Card>

        <Alert>
          <Icon name="Info" className="h-4 w-4" />
          <AlertDescription>
            –û–±—ã—Å–∫–∏–≤–∞–π –¥–æ–º, –∏—â–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã —á—Ç–æ–±—ã —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è!
          </AlertDescription>
        </Alert>
      </div>
    </div>
  );
};

export default HouseActivities;
