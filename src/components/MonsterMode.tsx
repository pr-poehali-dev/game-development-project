import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Person {
  id: number;
  name: string;
  avatar: string;
  alive: boolean;
  suspicion: number;
}

interface MonsterModeProps {
  onExit: () => void;
  playSound: (type: string) => void;
}

const MonsterMode = ({ onExit, playSound }: MonsterModeProps) => {
  const [screen, setScreen] = useState<'intro' | 'walking' | 'door' | 'inside' | 'talk' | 'check' | 'kill' | 'ending'>('intro');
  const [introStep, setIntroStep] = useState(0);
  const [madness, setMadness] = useState(0);
  const [suspicion, setSuspicion] = useState(0);
  const [victims, setVictims] = useState<{name: string, avatar: string}[]>([]);
  const [housePeople, setHousePeople] = useState<Person[]>([]);
  const [currentNPC, setCurrentNPC] = useState<Person | null>(null);
  const [dialogueHistory, setDialogueHistory] = useState<{role: 'player' | 'npc' | 'parasite', text: string}[]>([]);
  const [playerMessage, setPlayerMessage] = useState('');
  const [parasiteMessages, setParasiteMessages] = useState<string[]>([]);
  const [isAITyping, setIsAITyping] = useState(false);
  const [checksUsed, setChecksUsed] = useState<string[]>([]);
  const [endingType, setEndingType] = useState<'killed-all' | 'died' | 'freed' | null>(null);
  const [deathStep, setDeathStep] = useState(0);

  const parasiteVoices = [
    "...—É–±–µ–π –∏—Ö...",
    "...–æ–Ω–∏ –≤—Ä–∞–≥–∏...",
    "...–∫—Ä–æ–≤—å... –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å...",
    "...–Ω–µ –¥–æ–≤–µ—Ä—è–π –∏–º...",
    "...—Ç—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫...",
    "...—Å–¥–µ–ª–∞–π —ç—Ç–æ —Å–µ–π—á–∞—Å...",
    "...–≥–æ–ª–æ—Å–∞... —Ç–∞–∫ –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤...",
    "...—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è...",
    "...–º—ã ‚Äî –æ–¥–Ω–æ...",
    "...–Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–π—Å—è..."
  ];

  const startGame = () => {
    const people: Person[] = [
      { id: 1, name: '–ò–≤–∞–Ω', avatar: 'üë®', alive: true, suspicion: 0 },
      { id: 2, name: '–ú–∞—Ä–∏—è', avatar: 'üë©', alive: true, suspicion: 0 },
      { id: 3, name: '–î–µ–¥—É—à–∫–∞ –ü—ë—Ç—Ä', avatar: 'üë¥', alive: true, suspicion: 0 },
      { id: 4, name: '–õ–µ–Ω–∞', avatar: 'üëß', alive: true, suspicion: 0 }
    ];
    setHousePeople(people);
    setScreen('walking');
  };

  const addParasiteMessage = () => {
    const msg = parasiteVoices[Math.floor(Math.random() * parasiteVoices.length)];
    setParasiteMessages(prev => [...prev.slice(-2), msg]);
    setMadness(prev => Math.min(100, prev + 5));
  };

  const sendMessage = async () => {
    if (!playerMessage.trim() || !currentNPC) return;
    
    setDialogueHistory(prev => [...prev, { role: 'player', text: playerMessage }]);
    setIsAITyping(true);
    
    try {
      const response = await fetch('https://functions.poehali.dev/ab7b952b-cde4-4cf2-b791-fdc2a931993d', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          npc_name: currentNPC.name,
          npc_context: `–¢—ã –∂–∏–≤—ë—à—å –≤ –¥–æ–º–µ –≤–æ –≤—Ä–µ–º—è —ç–ø–∏–¥–µ–º–∏–∏ –ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –ö —Ç–µ–±–µ –ø—Ä–∏—à—ë–ª –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü. –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π: ${currentNPC.suspicion}%.`,
          player_message: playerMessage,
          suspicion_level: currentNPC.suspicion,
          madness_level: madness
        })
      });
      
      const data = await response.json();
      
      setDialogueHistory(prev => [...prev, { role: 'npc', text: data.npc_reply }]);
      setSuspicion(prev => Math.min(100, prev + (data.suspicion_increase || 0)));
      
      setHousePeople(prev => prev.map(p => 
        p.id === currentNPC.id 
          ? { ...p, suspicion: Math.min(100, p.suspicion + (data.suspicion_increase || 0)) }
          : p
      ));
      
      if (Math.random() > 0.7) addParasiteMessage();
      
      if (Math.random() > 0.6) {
        const checkMessages = [
          "‚Äî –î–∞–π-–∫–∞ —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–≤–æ–∏ —Ä—É–∫–∏... *—â—É–ø–∞–µ—Ç* –•–æ–ª–æ–¥–Ω—ã–µ –∫–∞–∫–∏–µ-—Ç–æ...",
          "‚Äî –¢—ã —Å—Ç—Ä–∞–Ω–Ω–æ –¥—ã—à–∏—à—å. –¢—ã —Ç–æ—á–Ω–æ –≤ –ø–æ—Ä—è–¥–∫–µ?",
          "‚Äî –ì–ª–∞–∑–∞ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–µ... –¢—ã –Ω–µ –∑–∞—Ä–∞–∂—ë–Ω?",
          "‚Äî –î–≤–∏–≥–∞–µ—à—å—Å—è –∫–∞–∫-—Ç–æ —Ä–µ–∑–∫–æ... –ü–æ–∫–∞–∂–∏—Å—å –Ω–∞ —Å–≤–µ—Ç—É.",
          "‚Äî –ê –Ω—É –≤—Å—Ç–∞–Ω—å —Å—é–¥–∞, –∫ –∑–µ—Ä–∫–∞–ª—É. –•–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–µ-—á—Ç–æ.",
          "‚Äî –ß—Ç–æ-—Ç–æ –æ—Ç —Ç–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ –ø–∞—Ö–Ω–µ—Ç... –¢—ã —Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ–∫?"
        ];
        const checkMsg = checkMessages[Math.floor(Math.random() * checkMessages.length)];
        setDialogueHistory(prev => [...prev, { role: 'npc', text: checkMsg }]);
        
        setHousePeople(prev => prev.map(p => 
          p.id === currentNPC.id 
            ? { ...p, suspicion: Math.min(100, p.suspicion + 15) }
            : p
        ));
        setSuspicion(prev => Math.min(100, prev + 15));
      }
      
    } catch (error) {
      setDialogueHistory(prev => [...prev, { 
        role: 'npc', 
        text: currentNPC.suspicion > 50 
          ? "–ß—Ç–æ-—Ç–æ —Ç—ã –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è... –û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ!" 
          : "–•–º... –ª–∞–¥–Ω–æ."
      }]);
    }
    
    setPlayerMessage('');
    setIsAITyping(false);
  };

  const killPerson = (person: Person) => {
    playSound('scream');
    setVictims(prev => [...prev, { name: person.name, avatar: person.avatar }]);
    setHousePeople(prev => prev.map(p => p.id === person.id ? { ...p, alive: false } : p));
    setMadness(prev => Math.min(100, prev + 20));
    
    addParasiteMessage();
    
    const aliveCount = housePeople.filter(p => p.alive && p.id !== person.id).length;
    
    if (aliveCount === 0) {
      setEndingType('killed-all');
      setScreen('ending');
    } else {
      setScreen('inside');
    }
  };

  const introSteps = [
    {
      emoji: '‚ùÑÔ∏è',
      title: '–ú–æ—Ä–æ–∑',
      text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ -40¬∞C. –¢—ã –±—Ä–µ–¥—ë—à—å –ø–æ —É–ª–∏—Ü–µ.',
      subtext: '–•–æ–ª–æ–¥ –ø—Ä–æ–Ω–∏–∑—ã–≤–∞–µ—Ç –¥–æ –∫–æ—Å—Ç–µ–π...'
    },
    {
      emoji: 'üòµ',
      title: '–û–±–º–æ—Ä–æ–∂–µ–Ω–∏–µ',
      text: '–¢—ã –ø–∞–¥–∞–µ—à—å –≤ —Å–Ω–µ–≥. –°–æ–∑–Ω–∞–Ω–∏–µ –ø–ª—ã–≤—ë—Ç.',
      subtext: '–ü–∞–ª—å—Ü—ã –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å. –ì–ª–∞–∑–∞ —Å–ª–∏–ø–∞—é—Ç—Å—è...'
    },
    {
      emoji: 'ü¶†',
      title: '–ü–∞—Ä–∞–∑–∏—Ç',
      text: '*–ß–¢–û-–¢–û* –ø—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤ —Ç–≤–æ—ë —É—Ö–æ',
      subtext: '–û—Å—Ç—Ä–∞—è –±–æ–ª—å. –®—ë–ø–æ—Ç. –ì–æ–ª–æ—Å–∞...'
    },
    {
      emoji: 'üß†',
      title: '–ö–æ–Ω—Ç—Ä–æ–ª—å',
      text: '"...—É–±–µ–π –∏—Ö –≤—Å–µ—Ö..."',
      subtext: '–¢—ã –±–æ–ª—å—à–µ –Ω–µ –æ–¥–∏–Ω –≤ —Å–≤–æ–µ–π –≥–æ–ª–æ–≤–µ'
    }
  ];

  const deathSteps = [
    "–í—ã—Å—Ç—Ä–µ–ª.",
    "–¢—ã –ø–∞–¥–∞–µ—à—å.",
    "–ü–∞—Ä–∞–∑–∏—Ç –ø—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∞—Å—Ç–∏ —Ç–µ–±—è.",
    "–ù–æ —É–∂–µ –ø–æ–∑–¥–Ω–æ.",
    "–¢–µ–º–Ω–æ—Ç–∞.",
    "...",
    "–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –≥–ª–∞–∑–∞.",
    "–¢—ã –≤ –¥–æ–º–µ. –í –∫–æ—Å–º–æ—Å–µ.",
    "–ó–¥–µ—Å—å —Ç–µ–ø–ª–æ. –°–≤–µ—Ç–ª–æ.",
    "–û–∫–Ω–æ ‚Äî –∑–≤—ë–∑–¥—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã.",
    "–ù–∞ —Å—Ç–æ–ª–µ ‚Äî —á–∞–π. –ö–Ω–∏–≥–∞.",
    "–°–º–µ—Ä—Ç—å —Å—Ç–æ–∏—Ç —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π.",
    "‚Äî –ü—Ä–∏–≤–µ—Ç, ‚Äî –≥–æ–≤–æ—Ä–∏—Ç –°–º–µ—Ä—Ç—å. ‚Äî –¢—ã —É–º–µ—Ä.",
    "‚Äî –ü–∞—Ä–∞–∑–∏—Ç –±–æ–ª—å—à–µ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–±—è.",
    "‚Äî –ó–¥–µ—Å—å —Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
    "‚Äî –≠—Ç–æ —Ç–≤–æ–π –¥–æ–º. –ù–∞–≤—Å–µ–≥–¥–∞.",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ–∫–æ–π.",
    "–í–ø–µ—Ä–≤—ã–µ –∑–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è."
  ];

  if (screen === 'intro') {
    const step = introSteps[introStep];
    return (
      <div className="min-h-screen p-4 bg-black flex items-center justify-center">
        <Card className="p-12 bg-gradient-to-b from-card to-destructive/20 border-2 border-destructive max-w-2xl">
          <div className="space-y-8 text-center">
            <div className="text-9xl animate-pulse">{step.emoji}</div>
            <div className="space-y-4">
              <h2 className="text-4xl font-bold text-destructive">{step.title}</h2>
              <p className="text-2xl text-foreground">{step.text}</p>
              <p className="text-lg text-muted-foreground italic">"{step.subtext}"</p>
            </div>
            <Button 
              onClick={() => {
                if (introStep < introSteps.length - 1) {
                  setIntroStep(prev => prev + 1);
                  playSound('tension');
                  if (introStep === 2) addParasiteMessage();
                } else {
                  startGame();
                  playSound('footstep');
                }
              }}
              size="lg"
              variant="destructive"
              className="w-full text-xl"
            >
              {introStep < introSteps.length - 1 ? '...' : '–ù–∞—á–∞—Ç—å'}
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  if (screen === 'walking') {
    return (
      <div className="min-h-screen p-4 bg-gradient-to-b from-black to-destructive/30">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant="outline" className="text-lg px-4 py-2">
              üíÄ –£–±–∏—Ç–æ: {victims.length}
            </Badge>
          </div>

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-7xl">üè†</div>
                <h2 className="text-3xl font-bold">–î–æ–º —Å –≥–æ—Ä—è—â–∏–º —Å–≤–µ—Ç–æ–º</h2>
                <p className="text-lg text-muted-foreground">
                  –¢—ã –≤–∏–¥–∏—à—å –¥–æ–º –≤–ø–µ—Ä–µ–¥–∏. –í–Ω—É—Ç—Ä–∏ –ª—é–¥–∏. –¢–µ–ø–ª–æ. –ñ–∏–∑–Ω—å...
                </p>
              </div>

              <div className="bg-secondary/30 p-6 rounded-lg space-y-3">
                <p className="text-foreground">
                  –ü–∞—Ä–∞–∑–∏—Ç —à–µ–ø—á–µ—Ç: <span className="text-destructive font-bold">"...–≤–æ–π–¥–∏... —É–±–µ–π –∏—Ö..."</span>
                </p>
                <p className="text-muted-foreground">
                  –¢–≤–æ—ë —Ç–µ–ª–æ –¥–≤–∏–∂–µ—Ç—Å—è —Å–∞–º–æ. –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –¥–≤–µ—Ä–∏.
                </p>
              </div>

              <Alert>
                <Icon name="Target" className="h-4 w-4" />
                <AlertDescription>
                  <strong>–¢–≤–æ—è –º–∏—Å—Å–∏—è:</strong> –ü—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –¥–æ–º –∏ —É–±–∏—Ç—å –≤—Å–µ—Ö ({housePeople.length} —á–µ–ª–æ–≤–µ–∫)
                </AlertDescription>
              </Alert>

              <Button 
                onClick={() => {
                  setScreen('door');
                  playSound('knock');
                  addParasiteMessage();
                }}
                size="lg"
                className="w-full"
                variant="destructive"
              >
                –ü–æ—Å—Ç—É—á–∞—Ç—å –≤ –¥–≤–µ—Ä—å
              </Button>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'door') {
    const guardian = housePeople[0];
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant={suspicion > 50 ? "destructive" : "secondary"} className="text-lg px-4 py-2">
              üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {suspicion}%
            </Badge>
          </div>

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-7xl">üö™</div>
                <h2 className="text-3xl font-bold">–î–≤–µ—Ä—å</h2>
                <p className="text-muted-foreground italic">*–¢–£–ö-–¢–£–ö-–¢–£–ö*</p>
              </div>

              <div className="bg-secondary/30 p-6 rounded-lg space-y-3">
                <p className="text-foreground font-bold">
                  {guardian.avatar} {guardian.name}: "–ö—Ç–æ —Ç–∞–º?!"
                </p>
                <p className="text-muted-foreground text-sm">
                  *–ì–æ–ª–æ—Å –Ω–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π*
                </p>
              </div>

              <Alert className="border-destructive/50">
                <Icon name="AlertTriangle" className="h-4 w-4" />
                <AlertDescription>
                  –¢–µ–±—è –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. –ü–∞—Ä–∞–∑–∏—Ç–∞ –º–æ–∂–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å.
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <Textarea
                  placeholder="–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? (–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç)"
                  value={playerMessage}
                  onChange={(e) => setPlayerMessage(e.target.value)}
                  rows={3}
                  className="resize-none"
                />
                <Button 
                  onClick={() => {
                    if (!playerMessage.trim()) return;
                    
                    const nervous = ['–ø–æ–º–æ–≥–∏—Ç–µ', '—É–º–æ–ª—è—é', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–∑–∞–º–µ—Ä–∑–∞—é'];
                    const hasNervous = nervous.some(w => playerMessage.toLowerCase().includes(w));
                    
                    const strange = ['–≥–æ–ª–æ—Å–∞', '–ø–∞—Ä–∞–∑–∏—Ç', '—É–±–∏—Ç—å', '–∫—Ä–æ–≤—å'];
                    const hasStrange = strange.some(w => playerMessage.toLowerCase().includes(w));
                    
                    if (hasStrange) {
                      setSuspicion(100);
                      setEndingType('died');
                      setScreen('ending');
                      playSound('gunshot');
                    } else {
                      setSuspicion(prev => Math.min(100, prev + (hasNervous ? 25 : 15)));
                      setCurrentNPC(guardian);
                      setScreen('inside');
                      playSound('door');
                      addParasiteMessage();
                    }
                    
                    setPlayerMessage('');
                  }}
                  disabled={!playerMessage.trim()}
                  size="lg"
                  className="w-full"
                >
                  –û—Ç–≤–µ—Ç–∏—Ç—å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'inside') {
    const alivePeople = housePeople.filter(p => p.alive);
    
    const randomCheck = Math.random() > 0.7;
    
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center gap-4">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant={suspicion > 50 ? "destructive" : "secondary"} className="text-lg px-4 py-2">
              üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {suspicion}%
            </Badge>
            <Badge variant="outline" className="text-lg px-4 py-2">
              üíÄ –£–±–∏—Ç–æ: {victims.length}/{housePeople.length}
            </Badge>
          </div>

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          {randomCheck && suspicion > 30 && (
            <Alert className="border-primary/50 bg-primary/10">
              <Icon name="Eye" className="h-5 w-5" />
              <AlertDescription>
                <strong>–ñ–∏—Ç–µ–ª–∏ –¥–æ–º–∞ –Ω–∞–±–ª—é–¥–∞—é—Ç –∑–∞ —Ç–æ–±–æ–π.</strong> –û–Ω–∏ –∑–∞–º–µ—á–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç–∏...
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-6xl">üè†</div>
                <h2 className="text-3xl font-bold">–í–Ω—É—Ç—Ä–∏ –¥–æ–º–∞</h2>
                <p className="text-muted-foreground">
                  {alivePeople.length} {alivePeople.length === 1 ? '—á–µ–ª–æ–≤–µ–∫ –∂–∏–≤' : '—á–µ–ª–æ–≤–µ–∫–∞ –∂–∏–≤—ã'}
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                {housePeople.map(person => (
                  <Card 
                    key={person.id}
                    className={`p-6 ${!person.alive ? 'opacity-30 bg-destructive/10' : 'hover:border-primary cursor-pointer'}`}
                  >
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="text-5xl">{person.avatar}</div>
                        {!person.alive && <div className="text-3xl">üíÄ</div>}
                      </div>
                      <div>
                        <h3 className="text-xl font-bold">{person.name}</h3>
                        {person.alive && (
                          <Badge variant={person.suspicion > 50 ? "destructive" : "secondary"} className="mt-2">
                            üîç {person.suspicion}%
                          </Badge>
                        )}
                      </div>
                      {person.alive && (
                        <div className="space-y-2">
                          <Button 
                            onClick={() => {
                              setCurrentNPC(person);
                              setScreen('talk');
                            }}
                            size="sm"
                            variant="outline"
                            className="w-full"
                          >
                            üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å
                          </Button>
                          <Button 
                            onClick={() => {
                              if (person.suspicion > 70) {
                                setEndingType('died');
                                setScreen('ending');
                                playSound('gunshot');
                              } else {
                                killPerson(person);
                              }
                            }}
                            size="sm"
                            variant="destructive"
                            className="w-full"
                          >
                            üî™ –£–±–∏—Ç—å
                          </Button>
                        </div>
                      )}
                    </div>
                  </Card>
                ))}
              </div>

              {madness >= 100 && (
                <Alert className="border-destructive bg-destructive/30">
                  <Icon name="Skull" className="h-5 w-5" />
                  <AlertDescription className="text-destructive font-bold">
                    –ü–ê–†–ê–ó–ò–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ö–û–ù–¢–†–û–õ–ò–†–£–ï–¢ –¢–ï–ë–Ø
                  </AlertDescription>
                </Alert>
              )}
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'talk' && currentNPC) {
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Button 
              variant="outline" 
              onClick={() => setScreen('inside')}
            >
              <Icon name="ArrowLeft" className="mr-2" size={16} />
              –ù–∞–∑–∞–¥
            </Button>
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† {madness}%
            </Badge>
          </div>

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-2">
                <div className="text-6xl">{currentNPC.avatar}</div>
                <h2 className="text-2xl font-bold">{currentNPC.name}</h2>
                <Badge variant={currentNPC.suspicion > 50 ? "destructive" : "secondary"}>
                  üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {currentNPC.suspicion}%
                </Badge>
              </div>

              <ScrollArea className="h-[400px] w-full border rounded-lg p-4">
                <div className="space-y-4">
                  {dialogueHistory.length === 0 && (
                    <p className="text-muted-foreground text-center italic">
                      –ù–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä...
                    </p>
                  )}
                  {dialogueHistory.map((msg, idx) => (
                    <div 
                      key={idx}
                      className={`p-3 rounded-lg ${
                        msg.role === 'player' 
                          ? 'bg-primary/20 ml-12' 
                          : msg.role === 'parasite'
                          ? 'bg-destructive/20 text-destructive font-bold'
                          : 'bg-secondary mr-12'
                      }`}
                    >
                      <p className="text-sm font-semibold mb-1">
                        {msg.role === 'player' ? '–¢—ã' : msg.role === 'parasite' ? '–ü–∞—Ä–∞–∑–∏—Ç' : currentNPC.name}
                      </p>
                      <p>{msg.text}</p>
                    </div>
                  ))}
                  {isAITyping && (
                    <div className="bg-secondary mr-12 p-3 rounded-lg">
                      <p className="text-sm italic">–ü–µ—á–∞—Ç–∞–µ—Ç...</p>
                    </div>
                  )}
                </div>
              </ScrollArea>

              <div className="space-y-3">
                <Textarea
                  placeholder="–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?"
                  value={playerMessage}
                  onChange={(e) => setPlayerMessage(e.target.value)}
                  rows={3}
                  className="resize-none"
                  disabled={isAITyping}
                />
                <Button 
                  onClick={sendMessage}
                  disabled={!playerMessage.trim() || isAITyping}
                  size="lg"
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }



  if (screen === 'ending') {
    if (endingType === 'killed-all') {
      return (
        <div className="min-h-screen p-4 bg-black flex items-center justify-center">
          <Card className="p-12 bg-destructive/20 border-4 border-destructive max-w-2xl">
            <div className="space-y-8 text-center">
              <div className="text-9xl animate-pulse">üíÄ</div>
              <div className="space-y-6">
                <h2 className="text-5xl font-bold text-destructive">–í–°–ï –ú–ï–†–¢–í–´</h2>
                <p className="text-2xl text-foreground">
                  –¢—ã —É–±–∏–ª –≤—Å–µ—Ö {housePeople.length} —á–µ–ª–æ–≤–µ–∫
                </p>
                <div className="flex justify-center gap-4 flex-wrap">
                  {victims.map((v, idx) => (
                    <div key={idx} className="text-4xl opacity-50">{v.avatar}</div>
                  ))}
                </div>
                <p className="text-lg text-muted-foreground italic">
                  "–ü–∞—Ä–∞–∑–∏—Ç –¥–æ–≤–æ–ª–µ–Ω. –¢—ã –±–æ–ª—å—à–µ –Ω–µ —á–µ–ª–æ–≤–µ–∫."
                </p>
              </div>
              <Button 
                onClick={onExit}
                variant="outline"
                size="lg"
                className="w-full border-destructive text-destructive"
              >
                –í –º–µ–Ω—é
              </Button>
            </div>
          </Card>
        </div>
      );
    }

    if (endingType === 'died') {
      return (
        <div className="min-h-screen p-4 bg-black flex items-center justify-center">
          <Card className="p-12 bg-card max-w-2xl">
            <div className="space-y-8 text-center">
              {deathStep < deathSteps.length - 1 ? (
                <>
                  <div className="text-7xl">{deathStep < 5 ? 'üíÄ' : deathStep < 12 ? 'üåå' : '‚òï'}</div>
                  <p className="text-2xl text-foreground animate-fade-in">
                    {deathSteps[deathStep]}
                  </p>
                  <Button 
                    onClick={() => {
                      setDeathStep(prev => prev + 1);
                      playSound('click');
                    }}
                    variant="outline"
                    size="lg"
                  >
                    ...
                  </Button>
                </>
              ) : (
                <>
                  <div className="text-7xl">üè†</div>
                  <div className="space-y-4">
                    <h2 className="text-4xl font-bold text-primary">–•–û–†–û–®–ê–Ø –ö–û–ù–¶–û–í–ö–ê</h2>
                    <p className="text-xl text-foreground">
                      –¢—ã –≤ –¥–æ–º–µ –≤ –∫–æ—Å–º–æ—Å–µ. –ù–∞–≤—Å–µ–≥–¥–∞.
                    </p>
                    <p className="text-lg text-muted-foreground italic">
                      "–ó–¥–µ—Å—å —Ç–µ–±–µ —Ö–æ—Ä–æ—à–æ. –ó–¥–µ—Å—å —Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                    </p>
                  </div>
                  <Button 
                    onClick={onExit}
                    className="bg-primary hover:bg-primary/90"
                    size="lg"
                  >
                    –í –º–µ–Ω—é
                  </Button>
                </>
              )}
            </div>
          </Card>
        </div>
      );
    }

    return (
      <div className="min-h-screen p-4 bg-gradient-to-b from-background to-primary/20 flex items-center justify-center">
        <Card className="p-12 bg-card border-4 border-primary max-w-2xl">
          <div className="space-y-8 text-center">
            <div className="text-9xl">üéâ</div>
            <div className="space-y-6">
              <h2 className="text-5xl font-bold text-primary">–¢–´ –°–í–û–ë–û–î–ï–ù!</h2>
              <p className="text-2xl text-foreground">
                –¢—ã —Å–º–æ–≥ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–∞
              </p>
              <p className="text-lg text-muted-foreground italic">
                "–ë–æ–ª—å. –ö—Ä–æ–≤—å. –ù–æ —Ç—ã –≤—ã—Ä–≤–∞–ª –ø–∞—Ä–∞–∑–∏—Ç–∞ –∏–∑ —Å–≤–æ–µ–≥–æ —É—Ö–∞."
              </p>
              <p className="text-md text-muted-foreground">
                –ë–µ–∑—É–º–∏–µ: {madness}% ‚Üí 0%
              </p>
            </div>
            <Button 
              onClick={onExit}
              className="bg-primary hover:bg-primary/90"
              size="lg"
            >
              –í –º–µ–Ω—é
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  return <div>Loading...</div>;
};

export default MonsterMode;