import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Person {
  id: number;
  name: string;
  avatar: string;
  alive: boolean;
  suspicion: number;
}

interface MonsterModeProps {
  onExit: () => void;
  playSound: (type: string) => void;
}

const MonsterMode = ({ onExit, playSound }: MonsterModeProps) => {
  const [screen, setScreen] = useState<'intro' | 'walking' | 'door' | 'inside' | 'talk' | 'check' | 'kill' | 'ending'>('intro');
  const [introStep, setIntroStep] = useState(0);
  const [madness, setMadness] = useState(0);
  const [suspicion, setSuspicion] = useState(0);
  const [victims, setVictims] = useState<{name: string, avatar: string}[]>([]);
  const [housePeople, setHousePeople] = useState<Person[]>([]);
  const [currentNPC, setCurrentNPC] = useState<Person | null>(null);
  const [dialogueHistory, setDialogueHistory] = useState<{role: 'player' | 'npc' | 'parasite', text: string}[]>([]);
  const [playerMessage, setPlayerMessage] = useState('');
  const [parasiteMessages, setParasiteMessages] = useState<string[]>([]);
  const [isAITyping, setIsAITyping] = useState(false);
  const [checksUsed, setChecksUsed] = useState<string[]>([]);
  const [endingType, setEndingType] = useState<'killed-all' | 'died' | 'freed' | null>(null);
  const [deathStep, setDeathStep] = useState(0);
  const [killsToday, setKillsToday] = useState(0);
  const [dayNumber, setDayNumber] = useState(1);
  const [hunger, setHunger] = useState(0);
  const [discoveries, setDiscoveries] = useState<string[]>([]);
  const [inventory, setInventory] = useState<string[]>([]);
  const [relationships, setRelationships] = useState<{[key: number]: number}>({});

  const parasiteVoices = [
    "...—É–±–µ–π –∏—Ö...",
    "...–æ–Ω–∏ –≤—Ä–∞–≥–∏...",
    "...–∫—Ä–æ–≤—å... –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å...",
    "...–Ω–µ –¥–æ–≤–µ—Ä—è–π –∏–º...",
    "...—Ç—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫...",
    "...—Å–¥–µ–ª–∞–π —ç—Ç–æ —Å–µ–π—á–∞—Å...",
    "...–≥–æ–ª–æ—Å–∞... —Ç–∞–∫ –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤...",
    "...—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è...",
    "...–º—ã ‚Äî –æ–¥–Ω–æ...",
    "...–Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–π—Å—è...",
    "...—è –≥–æ–ª–æ–¥–µ–Ω...",
    "...–Ω–∞–∫–æ—Ä–º–∏ –º–µ–Ω—è...",
    "...—Ç—ã —Å–ª–∞–±–µ–µ—à—å...",
    "...–æ–Ω–∏ –∑–Ω–∞—é—Ç...",
    "...–±–µ–≥–∏...",
    "...–ø—Ä—è—á—å—Å—è...",
    "...—Ç—ã —É–∂–µ –º—ë—Ä—Ç–≤..."
  ];

  const randomEvents = [
    { type: 'sound', text: '–¢—ã —Å–ª—ã—à–∏—à—å —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫ –∑–∞ —Å—Ç–µ–Ω–æ–π...', suspicionAdd: 5 },
    { type: 'mirror', text: '–¢—ã —Å–ª—É—á–∞–π–Ω–æ —Å–º–æ—Ç—Ä–∏—à—å –≤ –∑–µ—Ä–∫–∞–ª–æ. –¢–≤–æ—ë –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —É–ª—ã–±–∞–µ—Ç—Å—è, —Ö–æ—Ç—è —Ç—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—à—å.', madnessAdd: 10 },
    { type: 'blood', text: '–ò–∑ –Ω–æ—Å–∞ –∏–¥—ë—Ç –∫—Ä–æ–≤—å. –¢—ã –≤—ã—Ç–∏—Ä–∞–µ—à—å –µ—ë, –Ω–∞–¥–µ—è—Å—å —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–µ–ª.', suspicionAdd: 15 },
    { type: 'twitch', text: '–¢–≤–æ—è —Ä—É–∫–∞ –¥—ë—Ä–≥–∞–µ—Ç—Å—è —Å–∞–º–∞ –ø–æ —Å–µ–±–µ. –ü–∞—Ä–∞–∑–∏—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ.', madnessAdd: 8 },
    { type: 'whisper', text: '–õ—é–¥–∏ —à–µ–ø—á—É—Ç—Å—è –∑–∞ —Ç–≤–æ–µ–π —Å–ø–∏–Ω–æ–π...', suspicionAdd: 10 },
    { type: 'dream', text: '–¢—ã –ø–æ–º–Ω–∏—à—å —Å–æ–Ω... –¢–∞–º —Ç—ã –±—ã–ª –º–æ–Ω—Å—Ç—Ä–æ–º. –ò–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–Ω?', madnessAdd: 12 },
    { type: 'food', text: '–ü–∞—Ä–∞–∑–∏—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–∏—â–∏. –ì–æ–ª–æ–¥ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è...', hungerAdd: 20 },
  ];

  const startGame = () => {
    const people: Person[] = [
      { id: 1, name: '–ò–≤–∞–Ω', avatar: 'üë®', alive: true, suspicion: 0 },
      { id: 2, name: '–ú–∞—Ä–∏—è', avatar: 'üë©', alive: true, suspicion: 0 },
      { id: 3, name: '–î–µ–¥—É—à–∫–∞ –ü—ë—Ç—Ä', avatar: 'üë¥', alive: true, suspicion: 0 },
      { id: 4, name: '–õ–µ–Ω–∞', avatar: 'üëß', alive: true, suspicion: 0 }
    ];
    setHousePeople(people);
    setScreen('walking');
  };

  const addParasiteMessage = () => {
    const msg = parasiteVoices[Math.floor(Math.random() * parasiteVoices.length)];
    setParasiteMessages(prev => [...prev.slice(-2), msg]);
    setMadness(prev => Math.min(100, prev + 5));
  };

  const generateSmartReply = (msg: string, npc: Person): { reply: string, suspicion: number } => {
    const lowerMsg = msg.toLowerCase();
    const msgLength = msg.length;
    
    const nervousWords = ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—É–º–æ–ª—è—é', '–ø–æ–º–æ–≥–∏—Ç–µ', '–∑–∞–º–µ—Ä–∑–∞—é', '—Ö–æ–ª–æ–¥–Ω–æ', '–ø—Ä–æ—Å—Ç–∏—Ç–µ', '–∏–∑–≤–∏–Ω–∏—Ç–µ'];
    const strangeWords = ['–ø–∞—Ä–∞–∑–∏—Ç', '—É–±–∏—Ç—å', '–∫—Ä–æ–≤—å', '–≥–æ–ª–æ—Å–∞', '–º–æ–∑–≥', '–æ–Ω–∏', '—Å–ª–µ–¥—è—Ç', '–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç'];
    const politeWords = ['–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã'];
    const aggressiveWords = ['–±—ã—Å—Ç—Ä–æ', '–æ—Ç–∫—Ä—ã–≤–∞–π', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–µ–π—á–∞—Å –∂–µ', '–¥–∞–≤–∞–π'];
    const questionWords = ['–º–æ–∂–Ω–æ', '—Ä–∞–∑—Ä–µ—à–∏—Ç–µ', '–ø–æ–∑–≤–æ–ª—å—Ç–µ', '–º–æ–≥—É –ª–∏'];
    
    const hasNervous = nervousWords.some(w => lowerMsg.includes(w));
    const hasStrange = strangeWords.some(w => lowerMsg.includes(w));
    const hasPolite = politeWords.some(w => lowerMsg.includes(w));
    const hasAggressive = aggressiveWords.some(w => lowerMsg.includes(w));
    const hasQuestion = questionWords.some(w => lowerMsg.includes(w));
    const isShort = msgLength < 15;
    const hasQuestionMark = msg.includes('?');
    
    let suspicionAdd = 0;
    let replyPool: string[] = [];
    
    if (hasStrange) {
      return {
        reply: Math.random() > 0.5 
          ? "–ß–¢–û?! –¢—ã –æ —á—ë–º –≤–æ–æ–±—â–µ?! *—Ö–≤–∞—Ç–∞–µ—Ç—Å—è –∑–∞ –æ—Ä—É–∂–∏–µ*" 
          : "–¢—ã... —Ç—ã –∑–∞—Ä–∞–∂—ë–Ω! –£–ë–ò–†–ê–ô–°–Ø –û–¢–°–Æ–î–ê!",
        suspicion: 100
      };
    }
    
    if (npc.suspicion > 80) {
      replyPool = [
        `*${npc.name} –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ç–µ–±—è –¥—Ä–æ–±–æ–≤–∏–∫* –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞—é ‚Äî –ö–¢–û –¢–´?!`,
        "–•–≤–∞—Ç–∏—Ç –±–æ–ª—Ç–∞—Ç—å! –¢—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–∞–Ω–Ω—ã–π. –£—Ö–æ–¥–∏, –ø–æ–∫–∞ –∂–∏–≤!",
        "*—â—ë–ª–∫–∞–µ—Ç –∑–∞—Ç–≤–æ—Ä–æ–º* –ï—â—ë –æ–¥–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ...",
        "–Ø —Ç–µ–±—è –Ω–∞—Å–∫–≤–æ–∑—å –≤–∏–∂—É. –¢—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ü–û–®–Å–õ –í–û–ù!"
      ];
      suspicionAdd = 15;
    } else if (npc.suspicion > 60) {
      if (hasNervous) {
        replyPool = [
          "–ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å? –£ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π —Ä—É–∫–∏ –Ω–µ —Ç—Ä—è—Å—É—Ç—Å—è!",
          "*–ø—Ä–∏—â—É—Ä–∏–≤–∞–µ—Ç—Å—è* –£–º–æ–ª—è–µ—à—å? –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —É–º–æ–ª—è—é—Ç...",
          "–•–æ–ª–æ–¥–Ω–æ, –≥–æ–≤–æ—Ä–∏—à—å? –ê –ø–æ—á–µ–º—É —Ç—ã –≤–µ—Å—å –ø–æ—Ç–Ω—ã–π —Ç–æ–≥–¥–∞?",
          "–ü–æ–º–æ–≥–∏—Ç–µ... –ø–æ–º–æ–≥–∏—Ç–µ... –ó–Ω–∞—é —è —ç—Ç–∏ —à—Ç—É—á–∫–∏. –ü–æ–∫–∞–∂–∏ —à–µ—é!"
        ];
        suspicionAdd = 25;
      } else if (hasAggressive) {
        replyPool = [
          "–¢—ã –º–Ω–µ –ø—Ä–∏–∫–∞–∑—ã–≤–∞–µ—à—å?! *—Ö–≤–∞—Ç–∞–µ—Ç—Å—è –∑–∞ –±–∏—Ç—É* –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
          "–ë—ã—Å—Ç—Ä–æ? –ë–´–°–¢–†–û?! –î–∞ –∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π –≤–æ–æ–±—â–µ?!",
          "*–æ—Ç—Å—Ç—É–ø–∞–µ—Ç –Ω–∞–∑–∞–¥* –ê–≥—Ä–µ—Å—Å–∏—è ‚Äî –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è!"
        ];
        suspicionAdd = 30;
      } else {
        replyPool = [
          "*–Ω–µ —Å–ø—É—Å–∫–∞–µ—Ç —Å —Ç–µ–±—è –≥–ª–∞–∑* –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ ‚Äî —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?",
          "–°—Ç–æ–π —Ç–∞–º, –≥–¥–µ —Å—Ç–æ–∏—à—å. –ù–µ. –î–≤–∏–≥–∞–π—Å—è.",
          "*–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ñ–æ–Ω–∞—Ä—å –∫ —Ç–≤–æ–µ–º—É –ª–∏—Ü—É* –î–∞–π-–∫–∞ —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–≤–æ–∏ –≥–ª–∞–∑–∞...",
          "–†—É–∫–∏ –Ω–∞ –≤–∏–¥—É! –ò –≥–æ–≤–æ—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ."
        ];
        suspicionAdd = 15;
      }
    } else if (npc.suspicion > 40) {
      if (hasPolite) {
        replyPool = [
          "–í–µ–∂–ª–∏–≤—ã–π –∫–∞–∫–æ–π... –°–ª–∏—à–∫–æ–º –≤–µ–∂–ª–∏–≤—ã–π. –ß—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Ç–∞–∫.",
          "–•–º. –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –º–µ–Ω—è... *–Ω–µ–¥–æ–≤–µ—Ä—á–∏–≤–æ* –õ–∞–¥–Ω–æ, –≥–æ–≤–æ—Ä–∏ –¥–∞–ª—å—à–µ.",
          "*—á—É—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç—Å—è* –ù—É —Ö–æ—Ç—å –º–∞–Ω–µ—Ä—ã –µ—Å—Ç—å. –ß–µ–≥–æ –Ω–∞–¥–æ?"
        ];
        suspicionAdd = 5;
      } else if (isShort) {
        replyPool = [
          "–ß—Ç–æ '–¥–∞'? –ß—Ç–æ '–Ω–µ—Ç'? –û—Ç–≤–µ—á–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ!",
          "*—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ* –¢—ã —á—Ç–æ, –≥–æ–≤–æ—Ä–∏—Ç—å —Ä–∞–∑—É—á–∏–ª—Å—è?",
          "–ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –ø–ª–æ—Ö–æ–π –∑–Ω–∞–∫. –û–±—ä—è—Å–Ω—è–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
        ];
        suspicionAdd = 15;
      } else if (hasQuestion) {
        replyPool = [
          "–ú–æ–∂–Ω–æ... *—É—Å–º–µ—Ö–∞–µ—Ç—Å—è* –ê –µ—Å–ª–∏ —è —Å–∫–∞–∂—É '–Ω–µ–ª—å–∑—è'?",
          "–°–ø—Ä–∞—à–∏–≤–∞–µ—à—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è? –≠—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤–µ–∂–ª–∏–≤–æ...",
          "*–∫–∞—á–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π* –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ú–û–ò –≤–æ–ø—Ä–æ—Å—ã."
        ];
        suspicionAdd = 10;
      } else {
        replyPool = [
          "–•–º... *—Å–º–æ—Ç—Ä–∏—Ç —Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ–º* –ò –ø–æ—á–µ–º—É —è –¥–æ–ª–∂–µ–Ω —Ç–µ–±–µ –≤–µ—Ä–∏—Ç—å?",
          "*—Å–∫—Ä–µ—â–∏–≤–∞–µ—Ç —Ä—É–∫–∏* –ü—Ä–æ–¥–æ–ª–∂–∞–π. –Ø —Å–ª—É—à–∞—é.",
          "–ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ... –ª–∞–¥–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?"
        ];
        suspicionAdd = 8;
      }
    } else if (npc.suspicion > 20) {
      if (hasNervous) {
        replyPool = [
          "–≠–π, —É—Å–ø–æ–∫–æ–π—Å—è. –ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ –¥—ë—Ä–≥–∞–µ—à—å—Å—è?",
          "*–Ω–∞—Ö–º—É—Ä–∏–ª—Å—è* –ó–∞–º–µ—Ä–∑–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å? –ê —Ä—É–∫–∏ –ø–æ—á–µ–º—É —Ç—Ä—è—Å—É—Ç—Å—è?",
          "–£–º–æ–ª—è–µ—à—å –º–µ–Ω—è? *–Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞–µ—Ç—Å—è* –ß—Ç–æ —Ç—ã –Ω–∞—Ç–≤–æ—Ä–∏–ª?"
        ];
        suspicionAdd = 12;
      } else if (hasPolite && hasQuestion) {
        replyPool = [
          "*—á—É—Ç—å –∫–∏–≤–∞–µ—Ç* –ù—É... —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –∫—É–ª—å—Ç—É—Ä–Ω–æ. –°–ª—É—à–∞—é —Ç–µ–±—è.",
          `${npc.name} —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏. ‚Äî –õ–∞–¥–Ω–æ, –≥–æ–≤–æ—Ä–∏.`,
          "*–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ä—É–∂–∏–µ, –Ω–æ –¥–µ—Ä–∂–∏—Ç –Ω–∞–≥–æ—Ç–æ–≤–µ* –•–æ—Ä–æ—à–æ. –û–±—ä—è—Å–Ω—è–π."
        ];
        suspicionAdd = 3;
      } else {
        replyPool = [
          "–ü–æ–Ω—è—Ç–Ω–æ... *–ø–æ—á–µ—Å—ã–≤–∞–µ—Ç –∑–∞—Ç—ã–ª–æ–∫* –ò —á—Ç–æ –º–Ω–µ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å?",
          "*–ø–æ–∂–∏–º–∞–µ—Ç –ø–ª–µ—á–∞–º–∏* –ù—É –ª–∞–¥–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π.",
          "–•–º. –ê –ø–æ—á–µ–º—É —Ç—ã –∏–º–µ–Ω–Ω–æ –≤ –ú–û–ô –¥–æ–º —Å—Ç—É—á–∏—à—å—Å—è?"
        ];
        suspicionAdd = 7;
      }
    } else {
      if (hasPolite) {
        replyPool = [
          "*—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ* –û, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! –£–∂–µ —Ä–µ–¥–∫–æ—Å—Ç—å. –°–ª—É—à–∞—é.",
          `${npc.name} —É–ª—ã–±–∞–µ—Ç—Å—è. ‚Äî –î–∞–≤–Ω–æ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª –≤–µ–∂–ª–∏–≤—ã—Ö –ª—é–¥–µ–π. –ó–∞—Ö–æ–¥–∏.`,
          "*–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ä—É–∂–∏–µ* –•–æ—Ä–æ—à–æ, —Ö–æ—Ä–æ—à–æ. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π."
        ];
        suspicionAdd = 0;
      } else if (hasQuestion) {
        replyPool = [
          "–ú–æ–∂–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ... –ù–æ —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏ ‚Äî —Ç—ã –Ω–µ —É–∫—É—à–µ–Ω?",
          "*–∫–∏–≤–∞–µ—Ç* –î–∞, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ. –í—Ä–µ–º–µ–Ω–∞ —Å–µ–π—á–∞—Å —Ç–∞–∫–∏–µ...",
          "–•–æ—Ä–æ—à–æ. –ù–æ –±—ã—Å—Ç—Ä–æ, –ª–∞–¥–Ω–æ? –ú–Ω–µ –µ—â—ë –¥–≤–µ—Ä—å –±–∞—Ä—Ä–∏–∫–∞–¥–∏—Ä–æ–≤–∞—Ç—å."
        ];
        suspicionAdd = 5;
      } else {
        replyPool = [
          "*–∫–∏–≤–∞–µ—Ç* –ü–æ–Ω—è–ª. –õ–∞–¥–Ω–æ.",
          `${npc.name} —á–µ—à–µ—Ç –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫. ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ß—Ç–æ –µ—â—ë?`,
          "–û–∫–µ–π... *—Å–º–æ—Ç—Ä–∏—Ç –≤ –æ–∫–Ω–æ* –≠—Ç–æ –≤—Å—ë?",
          "–•–º. –ù—É —á—Ç–æ –∂... *—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ –≤–∑–¥—ã—Ö–∞–µ—Ç*"
        ];
        suspicionAdd = 4;
      }
    }
    
    if (hasNervous) suspicionAdd += 8;
    if (hasAggressive) suspicionAdd += 12;
    if (isShort && !hasQuestion) suspicionAdd += 5;
    if (!hasQuestionMark && !hasPolite && msgLength > 50) suspicionAdd -= 3;
    
    return {
      reply: replyPool[Math.floor(Math.random() * replyPool.length)],
      suspicion: Math.max(0, suspicionAdd)
    };
  };

  const sendMessage = async () => {
    if (!playerMessage.trim() || !currentNPC) return;
    
    setDialogueHistory(prev => [...prev, { role: 'player', text: playerMessage }]);
    setIsAITyping(true);
    
    const aiResponse = generateSmartReply(playerMessage, currentNPC);
    const npcReply = aiResponse.reply;
    const suspicionIncrease = aiResponse.suspicion;
    
    setDialogueHistory(prev => [...prev, { role: 'npc', text: npcReply }]);
    setSuspicion(prev => Math.min(100, prev + suspicionIncrease));
    
    setHousePeople(prev => prev.map(p => 
      p.id === currentNPC.id 
        ? { ...p, suspicion: Math.min(100, p.suspicion + suspicionIncrease) }
        : p
    ));
    
    if (Math.random() > 0.7) addParasiteMessage();
    
    if (Math.random() > 0.6 && currentNPC.suspicion > 30) {
      const checkMessages = [
        "‚Äî –î–∞–π-–∫–∞ —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–≤–æ–∏ —Ä—É–∫–∏... *—â—É–ø–∞–µ—Ç* –•–æ–ª–æ–¥–Ω—ã–µ –∫–∞–∫–∏–µ-—Ç–æ...",
        "‚Äî –¢—ã —Å—Ç—Ä–∞–Ω–Ω–æ –¥—ã—à–∏—à—å. –¢—ã —Ç–æ—á–Ω–æ –≤ –ø–æ—Ä—è–¥–∫–µ?",
        "‚Äî –ì–ª–∞–∑–∞ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–µ... –¢—ã –Ω–µ –∑–∞—Ä–∞–∂—ë–Ω?",
        "‚Äî –î–≤–∏–≥–∞–µ—à—å—Å—è –∫–∞–∫-—Ç–æ —Ä–µ–∑–∫–æ... –ü–æ–∫–∞–∂–∏—Å—å –Ω–∞ —Å–≤–µ—Ç—É.",
        "‚Äî –ê –Ω—É –≤—Å—Ç–∞–Ω—å —Å—é–¥–∞, –∫ –∑–µ—Ä–∫–∞–ª—É. –•–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–µ-—á—Ç–æ.",
        "‚Äî –ß—Ç–æ-—Ç–æ –æ—Ç —Ç–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ –ø–∞—Ö–Ω–µ—Ç... –¢—ã —Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ–∫?"
      ];
      const checkMsg = checkMessages[Math.floor(Math.random() * checkMessages.length)];
      setDialogueHistory(prev => [...prev, { role: 'npc', text: checkMsg }]);
      
      setHousePeople(prev => prev.map(p => 
        p.id === currentNPC.id 
          ? { ...p, suspicion: Math.min(100, p.suspicion + 15) }
          : p
      ));
      setSuspicion(prev => Math.min(100, prev + 15));
    }
    
    setPlayerMessage('');
    setIsAITyping(false);
  };

  const killPerson = (person: Person) => {
    playSound('scream');
    setVictims(prev => [...prev, { name: person.name, avatar: person.avatar }]);
    setHousePeople(prev => prev.map(p => {
      if (p.id === person.id) {
        return { ...p, alive: false };
      }
      return { ...p, suspicion: Math.min(100, p.suspicion + 40) };
    }));
    setMadness(prev => Math.max(0, prev - 15));
    setHunger(prev => Math.max(0, prev - 50));
    setKillsToday(prev => prev + 1);
    
    const possibleLoots = [
      { item: 'üîë –ö–ª—é—á –æ—Ç –ø–æ–¥–≤–∞–ª–∞', chance: 0.3 },
      { item: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω (—Ä–∞–∑—Ä—è–∂–µ–Ω)', chance: 0.4 },
      { item: 'üíä –¢–∞–±–ª–µ—Ç–∫–∏ –æ—Ç –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏', chance: 0.6 },
      { item: 'üî¶ –§–æ–Ω–∞—Ä–∏–∫', chance: 0.5 },
      { item: 'üóùÔ∏è –°—Ç—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á', chance: 0.2 },
    ];
    
    possibleLoots.forEach(loot => {
      if (Math.random() < loot.chance) {
        setInventory(prev => [...prev, loot.item]);
        setDiscoveries(prev => [...prev, `–ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${loot.item}`]);
      }
    });
    
    addParasiteMessage();
    
    const aliveCount = housePeople.filter(p => p.alive && p.id !== person.id).length;
    
    if (aliveCount === 0) {
      setEndingType('killed-all');
      setScreen('ending');
    } else {
      setScreen('inside');
    }
  };

  const triggerRandomEvent = () => {
    const event = randomEvents[Math.floor(Math.random() * randomEvents.length)];
    setDiscoveries(prev => [...prev, event.text]);
    if (event.suspicionAdd) setSuspicion(prev => Math.min(100, prev + event.suspicionAdd));
    if (event.madnessAdd) setMadness(prev => Math.min(100, prev + event.madnessAdd));
    if (event.hungerAdd) setHunger(prev => Math.min(100, prev + event.hungerAdd));
  };

  const useItem = (item: string) => {
    if (item.includes('–¢–∞–±–ª–µ—Ç–∫–∏')) {
      setMadness(prev => Math.max(0, prev - 20));
      setInventory(prev => prev.filter(i => i !== item));
      setDiscoveries(prev => [...prev, 'üíä –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫–∏. –ì–æ–ª–æ—Å–∞ —Å—Ç–∏—Ö–ª–∏...']);
    } else if (item.includes('–§–æ–Ω–∞—Ä–∏–∫')) {
      setSuspicion(prev => Math.max(0, prev - 15));
      setInventory(prev => prev.filter(i => i !== item));
      setDiscoveries(prev => [...prev, 'üî¶ –û—Å–≤–µ—Ç–∏–ª —Å–µ–±—è. –õ—é–¥–∏ —É—Å–ø–æ–∫–æ–∏–ª–∏—Å—å.']);
    }
  };

  const introSteps = [
    {
      emoji: '‚ùÑÔ∏è',
      title: '–ú–æ—Ä–æ–∑',
      text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ -40¬∞C. –¢—ã –±—Ä–µ–¥—ë—à—å –ø–æ —É–ª–∏—Ü–µ.',
      subtext: '–•–æ–ª–æ–¥ –ø—Ä–æ–Ω–∏–∑—ã–≤–∞–µ—Ç –¥–æ –∫–æ—Å—Ç–µ–π...'
    },
    {
      emoji: 'üòµ',
      title: '–û–±–º–æ—Ä–æ–∂–µ–Ω–∏–µ',
      text: '–¢—ã –ø–∞–¥–∞–µ—à—å –≤ —Å–Ω–µ–≥. –°–æ–∑–Ω–∞–Ω–∏–µ –ø–ª—ã–≤—ë—Ç.',
      subtext: '–ü–∞–ª—å—Ü—ã –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å. –ì–ª–∞–∑–∞ —Å–ª–∏–ø–∞—é—Ç—Å—è...'
    },
    {
      emoji: 'ü¶†',
      title: '–ü–∞—Ä–∞–∑–∏—Ç',
      text: '*–ß–¢–û-–¢–û* –ø—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤ —Ç–≤–æ—ë —É—Ö–æ',
      subtext: '–û—Å—Ç—Ä–∞—è –±–æ–ª—å. –®—ë–ø–æ—Ç. –ì–æ–ª–æ—Å–∞...'
    },
    {
      emoji: 'üß†',
      title: '–ö–æ–Ω—Ç—Ä–æ–ª—å',
      text: '"...—É–±–µ–π –∏—Ö –≤—Å–µ—Ö..."',
      subtext: '–¢—ã –±–æ–ª—å—à–µ –Ω–µ –æ–¥–∏–Ω –≤ —Å–≤–æ–µ–π –≥–æ–ª–æ–≤–µ'
    }
  ];

  const deathSteps = [
    "–í—ã—Å—Ç—Ä–µ–ª.",
    "–¢—ã –ø–∞–¥–∞–µ—à—å.",
    "–ü–∞—Ä–∞–∑–∏—Ç –ø—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∞—Å—Ç–∏ —Ç–µ–±—è.",
    "–ù–æ —É–∂–µ –ø–æ–∑–¥–Ω–æ.",
    "–¢–µ–º–Ω–æ—Ç–∞.",
    "...",
    "–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –≥–ª–∞–∑–∞.",
    "–¢—ã –≤ –¥–æ–º–µ. –í –∫–æ—Å–º–æ—Å–µ.",
    "–ó–¥–µ—Å—å —Ç–µ–ø–ª–æ. –°–≤–µ—Ç–ª–æ.",
    "–û–∫–Ω–æ ‚Äî –∑–≤—ë–∑–¥—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã.",
    "–ù–∞ —Å—Ç–æ–ª–µ ‚Äî —á–∞–π. –ö–Ω–∏–≥–∞.",
    "–°–º–µ—Ä—Ç—å —Å—Ç–æ–∏—Ç —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π.",
    "‚Äî –ü—Ä–∏–≤–µ—Ç, ‚Äî –≥–æ–≤–æ—Ä–∏—Ç –°–º–µ—Ä—Ç—å. ‚Äî –¢—ã —É–º–µ—Ä.",
    "‚Äî –ü–∞—Ä–∞–∑–∏—Ç –±–æ–ª—å—à–µ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–±—è.",
    "‚Äî –ó–¥–µ—Å—å —Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
    "‚Äî –≠—Ç–æ —Ç–≤–æ–π –¥–æ–º. –ù–∞–≤—Å–µ–≥–¥–∞.",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ–∫–æ–π.",
    "–í–ø–µ—Ä–≤—ã–µ –∑–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è."
  ];

  if (screen === 'intro') {
    const step = introSteps[introStep];
    return (
      <div className="min-h-screen p-4 bg-black flex items-center justify-center">
        <Card className="p-12 bg-gradient-to-b from-card to-destructive/20 border-2 border-destructive max-w-2xl">
          <div className="space-y-8 text-center">
            <div className="text-9xl animate-pulse">{step.emoji}</div>
            <div className="space-y-4">
              <h2 className="text-4xl font-bold text-destructive">{step.title}</h2>
              <p className="text-2xl text-foreground">{step.text}</p>
              <p className="text-lg text-muted-foreground italic">"{step.subtext}"</p>
            </div>
            <Button 
              onClick={() => {
                if (introStep < introSteps.length - 1) {
                  setIntroStep(prev => prev + 1);
                  playSound('tension');
                  if (introStep === 2) addParasiteMessage();
                } else {
                  startGame();
                  playSound('footstep');
                }
              }}
              size="lg"
              variant="destructive"
              className="w-full text-xl"
            >
              {introStep < introSteps.length - 1 ? '...' : '–ù–∞—á–∞—Ç—å'}
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  if (screen === 'walking') {
    return (
      <div className="min-h-screen p-4 bg-gradient-to-b from-black to-destructive/30">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant="outline" className="text-lg px-4 py-2">
              üíÄ –£–±–∏—Ç–æ: {victims.length}
            </Badge>
          </div>

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-7xl">üè†</div>
                <h2 className="text-3xl font-bold">–î–æ–º —Å –≥–æ—Ä—è—â–∏–º —Å–≤–µ—Ç–æ–º</h2>
                <p className="text-lg text-muted-foreground">
                  –¢—ã –≤–∏–¥–∏—à—å –¥–æ–º –≤–ø–µ—Ä–µ–¥–∏. –í–Ω—É—Ç—Ä–∏ –ª—é–¥–∏. –¢–µ–ø–ª–æ. –ñ–∏–∑–Ω—å...
                </p>
              </div>

              <div className="bg-secondary/30 p-6 rounded-lg space-y-3">
                <p className="text-foreground">
                  –ü–∞—Ä–∞–∑–∏—Ç —à–µ–ø—á–µ—Ç: <span className="text-destructive font-bold">"...–≤–æ–π–¥–∏... —É–±–µ–π –∏—Ö..."</span>
                </p>
                <p className="text-muted-foreground">
                  –¢–≤–æ—ë —Ç–µ–ª–æ –¥–≤–∏–∂–µ—Ç—Å—è —Å–∞–º–æ. –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –¥–≤–µ—Ä–∏.
                </p>
              </div>

              <Alert>
                <Icon name="Target" className="h-4 w-4" />
                <AlertDescription>
                  <strong>–¢–≤–æ—è –º–∏—Å—Å–∏—è:</strong> –ü—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –¥–æ–º –∏ —É–±–∏—Ç—å –≤—Å–µ—Ö ({housePeople.length} —á–µ–ª–æ–≤–µ–∫)
                </AlertDescription>
              </Alert>

              <Button 
                onClick={() => {
                  setScreen('door');
                  playSound('knock');
                  addParasiteMessage();
                }}
                size="lg"
                className="w-full"
                variant="destructive"
              >
                –ü–æ—Å—Ç—É—á–∞—Ç—å –≤ –¥–≤–µ—Ä—å
              </Button>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'door') {
    const guardian = housePeople[0];
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant={suspicion > 50 ? "destructive" : "secondary"} className="text-lg px-4 py-2">
              üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {suspicion}%
            </Badge>
          </div>

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-7xl">üö™</div>
                <h2 className="text-3xl font-bold">–î–≤–µ—Ä—å</h2>
                <p className="text-muted-foreground italic">*–¢–£–ö-–¢–£–ö-–¢–£–ö*</p>
              </div>

              <div className="bg-secondary/30 p-6 rounded-lg space-y-3">
                <p className="text-foreground font-bold">
                  {guardian.avatar} {guardian.name}: "–ö—Ç–æ —Ç–∞–º?!"
                </p>
                <p className="text-muted-foreground text-sm">
                  *–ì–æ–ª–æ—Å –Ω–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π*
                </p>
              </div>

              <Alert className="border-destructive/50">
                <Icon name="AlertTriangle" className="h-4 w-4" />
                <AlertDescription>
                  –¢–µ–±—è –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. –ü–∞—Ä–∞–∑–∏—Ç–∞ –º–æ–∂–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å.
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <Textarea
                  placeholder="–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? (–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç)"
                  value={playerMessage}
                  onChange={(e) => setPlayerMessage(e.target.value)}
                  rows={3}
                  className="resize-none"
                />
                <Button 
                  onClick={() => {
                    if (!playerMessage.trim()) return;
                    
                    const nervous = ['–ø–æ–º–æ–≥–∏—Ç–µ', '—É–º–æ–ª—è—é', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–∑–∞–º–µ—Ä–∑–∞—é'];
                    const hasNervous = nervous.some(w => playerMessage.toLowerCase().includes(w));
                    
                    const strange = ['–≥–æ–ª–æ—Å–∞', '–ø–∞—Ä–∞–∑–∏—Ç', '—É–±–∏—Ç—å', '–∫—Ä–æ–≤—å'];
                    const hasStrange = strange.some(w => playerMessage.toLowerCase().includes(w));
                    
                    if (hasStrange) {
                      setSuspicion(100);
                      setEndingType('died');
                      setScreen('ending');
                      playSound('gunshot');
                    } else {
                      setSuspicion(prev => Math.min(100, prev + (hasNervous ? 25 : 15)));
                      setCurrentNPC(guardian);
                      setScreen('inside');
                      playSound('door');
                      addParasiteMessage();
                    }
                    
                    setPlayerMessage('');
                  }}
                  disabled={!playerMessage.trim()}
                  size="lg"
                  className="w-full"
                >
                  –û—Ç–≤–µ—Ç–∏—Ç—å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'inside') {
    const alivePeople = housePeople.filter(p => p.alive);
    
    const randomCheck = Math.random() > 0.7;
    
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center gap-4 flex-wrap">
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† –ë–µ–∑—É–º–∏–µ: {madness}%
            </Badge>
            <Badge variant={suspicion > 50 ? "destructive" : "secondary"} className="text-lg px-4 py-2">
              üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {suspicion}%
            </Badge>
            <Badge variant={hunger > 70 ? "destructive" : "outline"} className="text-lg px-4 py-2">
              üçñ –ì–æ–ª–æ–¥: {hunger}%
            </Badge>
            <Badge variant="outline" className="text-lg px-4 py-2">
              üíÄ –£–±–∏—Ç–æ: {victims.length}/{housePeople.length}
            </Badge>
            <Badge variant={killsToday >= 1 ? "destructive" : "secondary"} className="text-lg px-4 py-2">
              üåô –î–µ–Ω—å {dayNumber} | –£–±–∏–π—Å—Ç–≤: {killsToday}/1
            </Badge>
          </div>

          {hunger >= 100 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Skull" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                –ü–ê–†–ê–ó–ò–¢ –£–ú–ò–†–ê–ï–¢ –û–¢ –ì–û–õ–û–î–ê! –°–†–û–ß–ù–û –ù–£–ñ–ù–ê –ñ–ï–†–¢–í–ê!
              </AlertDescription>
            </Alert>
          )}

          {hunger > 70 && hunger < 100 && (
            <Alert className="border-orange-500 bg-orange-500/20">
              <Icon name="AlertTriangle" className="h-5 w-5 text-orange-500" />
              <AlertDescription className="text-orange-500 font-bold">
                –ü–∞—Ä–∞–∑–∏—Ç –≥–æ–ª–æ–¥–µ–Ω... –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–ª–∞–±–æ—Å—Ç—å...
              </AlertDescription>
            </Alert>
          )}

          {parasiteMessages.length > 0 && (
            <Alert className="border-destructive bg-destructive/20 animate-pulse">
              <Icon name="Brain" className="h-5 w-5 text-destructive" />
              <AlertDescription className="text-destructive font-bold">
                {parasiteMessages[parasiteMessages.length - 1]}
              </AlertDescription>
            </Alert>
          )}

          {randomCheck && suspicion > 30 && (
            <Alert className="border-primary/50 bg-primary/10">
              <Icon name="Eye" className="h-5 w-5" />
              <AlertDescription>
                <strong>–ñ–∏—Ç–µ–ª–∏ –¥–æ–º–∞ –Ω–∞–±–ª—é–¥–∞—é—Ç –∑–∞ —Ç–æ–±–æ–π.</strong> –û–Ω–∏ –∑–∞–º–µ—á–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç–∏...
              </AlertDescription>
            </Alert>
          )}

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-4">
                <div className="text-6xl">üè†</div>
                <h2 className="text-3xl font-bold">–í–Ω—É—Ç—Ä–∏ –¥–æ–º–∞</h2>
                <p className="text-muted-foreground">
                  {alivePeople.length} {alivePeople.length === 1 ? '—á–µ–ª–æ–≤–µ–∫ –∂–∏–≤' : '—á–µ–ª–æ–≤–µ–∫–∞ –∂–∏–≤—ã'}
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                {housePeople.map(person => (
                  <Card 
                    key={person.id}
                    className={`p-6 ${!person.alive ? 'opacity-30 bg-destructive/10' : 'hover:border-primary cursor-pointer'}`}
                  >
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="text-5xl">{person.avatar}</div>
                        {!person.alive && <div className="text-3xl">üíÄ</div>}
                      </div>
                      <div>
                        <h3 className="text-xl font-bold">{person.name}</h3>
                        {person.alive && (
                          <Badge variant={person.suspicion > 50 ? "destructive" : "secondary"} className="mt-2">
                            üîç {person.suspicion}%
                          </Badge>
                        )}
                      </div>
                      {person.alive && (
                        <div className="space-y-2">
                          <div className="flex gap-2">
                            <Button 
                              onClick={() => {
                                setCurrentNPC(person);
                                setScreen('talk');
                              }}
                              size="sm"
                              variant="outline"
                              className="flex-1"
                            >
                              üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å
                            </Button>
                            <Button 
                              onClick={() => {
                                if (inventory.some(i => i.includes('–¢–∞–±–ª–µ—Ç–∫–∏'))) {
                                  const item = inventory.find(i => i.includes('–¢–∞–±–ª–µ—Ç–∫–∏'))!;
                                  setInventory(prev => prev.filter(i => i !== item));
                                  setHousePeople(prev => prev.map(p => 
                                    p.id === person.id ? { ...p, suspicion: Math.max(0, p.suspicion - 30) } : p
                                  ));
                                  setDiscoveries(prev => [...prev, `–î–∞–ª —Ç–∞–±–ª–µ—Ç–∫–∏ ${person.name}. –û–Ω–∏ —Å—Ç–∞–ª–∏ –¥–æ–≤–µ—Ä—á–∏–≤–µ–µ.`]);
                                } else {
                                  const giftSuspicionReduce = Math.floor(Math.random() * 15) + 10;
                                  setHousePeople(prev => prev.map(p => 
                                    p.id === person.id ? { ...p, suspicion: Math.max(0, p.suspicion - giftSuspicionReduce) } : p
                                  ));
                                  setDiscoveries(prev => [...prev, `–ü–æ–º–æ–≥ ${person.name}. –û–Ω–∏ —Å—Ç–∞–ª–∏ –¥–æ–≤–µ—Ä—á–∏–≤–µ–µ.`]);
                                }
                              }}
                              size="sm"
                              variant="ghost"
                              className="flex-1"
                            >
                              ü§ù –ü–æ–º–æ—á—å
                            </Button>
                          </div>
                          <Button 
                            onClick={() => {
                              if (killsToday >= 1) {
                                return;
                              }
                              if (person.suspicion > 70) {
                                setEndingType('died');
                                setScreen('ending');
                                playSound('gunshot');
                              } else {
                                killPerson(person);
                              }
                            }}
                            size="sm"
                            variant="destructive"
                            className="w-full"
                            disabled={killsToday >= 1}
                            title={killsToday >= 1 ? "–¢–æ–ª—å–∫–æ 1 —É–±–∏–π—Å—Ç–≤–æ –≤ –¥–µ–Ω—å" : ""}
                          >
                            {killsToday >= 1 ? '‚è≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ' : 'üî™ –£–±–∏—Ç—å'}
                          </Button>
                        </div>
                      )}
                    </div>
                  </Card>
                ))}
              </div>

              {madness >= 100 && (
                <Alert className="border-destructive bg-destructive/30">
                  <Icon name="Skull" className="h-5 w-5" />
                  <AlertDescription className="text-destructive font-bold">
                    –ü–ê–†–ê–ó–ò–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ö–û–ù–¢–†–û–õ–ò–†–£–ï–¢ –¢–ï–ë–Ø
                  </AlertDescription>
                </Alert>
              )}

              {inventory.length > 0 && (
                <Card className="p-4 bg-primary/5">
                  <h3 className="font-bold mb-3 flex items-center gap-2">
                    <Icon name="Backpack" size={20} />
                    –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                  </h3>
                  <div className="space-y-2">
                    {inventory.map((item, idx) => (
                      <div key={idx} className="flex items-center justify-between gap-2">
                        <span className="text-sm">{item}</span>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => useItem(item)}
                        >
                          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                        </Button>
                      </div>
                    ))}
                  </div>
                </Card>
              )}

              {discoveries.length > 0 && (
                <Card className="p-4 bg-muted/50">
                  <h3 className="font-bold mb-2 flex items-center gap-2">
                    <Icon name="ScrollText" size={20} />
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                  </h3>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    {discoveries.slice(-3).map((d, idx) => (
                      <div key={idx}>‚Ä¢ {d}</div>
                    ))}
                  </div>
                </Card>
              )}

              <Button
                onClick={() => {
                  setKillsToday(0);
                  setDayNumber(prev => prev + 1);
                  setSuspicion(prev => Math.max(0, prev - 10));
                  setMadness(prev => Math.min(100, prev + 10));
                  setHunger(prev => Math.min(100, prev + 25));
                  if (Math.random() > 0.5) triggerRandomEvent();
                  addParasiteMessage();
                  playSound('door');
                }}
                size="lg"
                variant="outline"
                className="w-full text-xl py-6"
              >
                üåô –õ–µ—á—å —Å–ø–∞—Ç—å (–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
              </Button>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (screen === 'talk' && currentNPC) {
    return (
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto space-y-6 pt-8">
          <div className="flex justify-between items-center">
            <Button 
              variant="outline" 
              onClick={() => setScreen('inside')}
            >
              <Icon name="ArrowLeft" className="mr-2" size={16} />
              –ù–∞–∑–∞–¥
            </Button>
            <Badge variant="destructive" className="text-lg px-4 py-2">
              üß† {madness}%
            </Badge>
          </div>

          <Card className="p-8">
            <div className="space-y-6">
              <div className="text-center space-y-2">
                <div className="text-6xl">{currentNPC.avatar}</div>
                <h2 className="text-2xl font-bold">{currentNPC.name}</h2>
                <Badge variant={currentNPC.suspicion > 50 ? "destructive" : "secondary"}>
                  üîç –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: {currentNPC.suspicion}%
                </Badge>
              </div>

              <ScrollArea className="h-[400px] w-full border rounded-lg p-4">
                <div className="space-y-4">
                  {dialogueHistory.length === 0 && (
                    <p className="text-muted-foreground text-center italic">
                      –ù–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä...
                    </p>
                  )}
                  {dialogueHistory.map((msg, idx) => (
                    <div 
                      key={idx}
                      className={`p-3 rounded-lg ${
                        msg.role === 'player' 
                          ? 'bg-primary/20 ml-12' 
                          : msg.role === 'parasite'
                          ? 'bg-destructive/20 text-destructive font-bold'
                          : 'bg-secondary mr-12'
                      }`}
                    >
                      <p className="text-sm font-semibold mb-1">
                        {msg.role === 'player' ? '–¢—ã' : msg.role === 'parasite' ? '–ü–∞—Ä–∞–∑–∏—Ç' : currentNPC.name}
                      </p>
                      <p>{msg.text}</p>
                    </div>
                  ))}
                  {isAITyping && (
                    <div className="bg-secondary mr-12 p-3 rounded-lg">
                      <p className="text-sm italic">–ü–µ—á–∞—Ç–∞–µ—Ç...</p>
                    </div>
                  )}
                </div>
              </ScrollArea>

              <div className="space-y-3">
                <Textarea
                  placeholder="–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?"
                  value={playerMessage}
                  onChange={(e) => setPlayerMessage(e.target.value)}
                  rows={3}
                  className="resize-none"
                  disabled={isAITyping}
                />
                <Button 
                  onClick={sendMessage}
                  disabled={!playerMessage.trim() || isAITyping}
                  size="lg"
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }



  if (screen === 'ending') {
    if (endingType === 'killed-all') {
      return (
        <div className="min-h-screen p-4 bg-black flex items-center justify-center">
          <Card className="p-12 bg-destructive/20 border-4 border-destructive max-w-2xl">
            <div className="space-y-8 text-center">
              <div className="text-9xl animate-pulse">üíÄ</div>
              <div className="space-y-6">
                <h2 className="text-5xl font-bold text-destructive">–í–°–ï –ú–ï–†–¢–í–´</h2>
                <p className="text-2xl text-foreground">
                  –¢—ã —É–±–∏–ª –≤—Å–µ—Ö {housePeople.length} —á–µ–ª–æ–≤–µ–∫
                </p>
                <div className="flex justify-center gap-4 flex-wrap">
                  {victims.map((v, idx) => (
                    <div key={idx} className="text-4xl opacity-50">{v.avatar}</div>
                  ))}
                </div>
                <p className="text-lg text-muted-foreground italic">
                  "–ü–∞—Ä–∞–∑–∏—Ç –¥–æ–≤–æ–ª–µ–Ω. –¢—ã –±–æ–ª—å—à–µ –Ω–µ —á–µ–ª–æ–≤–µ–∫."
                </p>
              </div>
              <Button 
                onClick={onExit}
                variant="outline"
                size="lg"
                className="w-full border-destructive text-destructive"
              >
                –í –º–µ–Ω—é
              </Button>
            </div>
          </Card>
        </div>
      );
    }

    if (endingType === 'died') {
      return (
        <div className="min-h-screen p-4 bg-black flex items-center justify-center">
          <Card className="p-12 bg-card max-w-2xl">
            <div className="space-y-8 text-center">
              {deathStep < deathSteps.length - 1 ? (
                <>
                  <div className="text-7xl">{deathStep < 5 ? 'üíÄ' : deathStep < 12 ? 'üåå' : '‚òï'}</div>
                  <p className="text-2xl text-foreground animate-fade-in">
                    {deathSteps[deathStep]}
                  </p>
                  <Button 
                    onClick={() => {
                      setDeathStep(prev => prev + 1);
                      playSound('click');
                    }}
                    variant="outline"
                    size="lg"
                  >
                    ...
                  </Button>
                </>
              ) : (
                <>
                  <div className="text-7xl">üè†</div>
                  <div className="space-y-4">
                    <h2 className="text-4xl font-bold text-primary">–•–û–†–û–®–ê–Ø –ö–û–ù–¶–û–í–ö–ê</h2>
                    <p className="text-xl text-foreground">
                      –¢—ã –≤ –¥–æ–º–µ –≤ –∫–æ—Å–º–æ—Å–µ. –ù–∞–≤—Å–µ–≥–¥–∞.
                    </p>
                    <p className="text-lg text-muted-foreground italic">
                      "–ó–¥–µ—Å—å —Ç–µ–±–µ —Ö–æ—Ä–æ—à–æ. –ó–¥–µ—Å—å —Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                    </p>
                  </div>
                  <Button 
                    onClick={onExit}
                    className="bg-primary hover:bg-primary/90"
                    size="lg"
                  >
                    –í –º–µ–Ω—é
                  </Button>
                </>
              )}
            </div>
          </Card>
        </div>
      );
    }

    return (
      <div className="min-h-screen p-4 bg-gradient-to-b from-background to-primary/20 flex items-center justify-center">
        <Card className="p-12 bg-card border-4 border-primary max-w-2xl">
          <div className="space-y-8 text-center">
            <div className="text-9xl">üéâ</div>
            <div className="space-y-6">
              <h2 className="text-5xl font-bold text-primary">–¢–´ –°–í–û–ë–û–î–ï–ù!</h2>
              <p className="text-2xl text-foreground">
                –¢—ã —Å–º–æ–≥ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø–∞—Ä–∞–∑–∏—Ç–∞
              </p>
              <p className="text-lg text-muted-foreground italic">
                "–ë–æ–ª—å. –ö—Ä–æ–≤—å. –ù–æ —Ç—ã –≤—ã—Ä–≤–∞–ª –ø–∞—Ä–∞–∑–∏—Ç–∞ –∏–∑ —Å–≤–æ–µ–≥–æ —É—Ö–∞."
              </p>
              <p className="text-md text-muted-foreground">
                –ë–µ–∑—É–º–∏–µ: {madness}% ‚Üí 0%
              </p>
            </div>
            <Button 
              onClick={onExit}
              className="bg-primary hover:bg-primary/90"
              size="lg"
            >
              –í –º–µ–Ω—é
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  return <div>Loading...</div>;
};

export default MonsterMode;